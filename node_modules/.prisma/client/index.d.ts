
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model country
 */

export type country = {
  ct_id: number
  country: string | null
}

/**
 * Model history
 */

export type history = {
  h_id: number
  h_date: Date | null
  wish: string | null
  p_id: number
  kt_id: number | null
  user_id: number | null
}

/**
 * Model krathong
 */

export type krathong = {
  kt_id: number
  kt_name: string | null
  amount: number | null
  kt_image: string | null
  detail: string | null
  t_id: number
}

/**
 * Model kt_type
 */

export type kt_type = {
  t_id: number
  type_name: string | null
}

/**
 * Model person
 */

export type person = {
  user_id: number
  fname: string | null
  lname: string | null
  username: string | null
  password: string | null
  email: string | null
  id_card: string | null
  phone: string | null
  role_id: number
  ct_id: number
}

/**
 * Model person_role
 */

export type person_role = {
  role_id: number
  role_name: string | null
}

/**
 * Model place
 */

export type place = {
  p_id: number
  p_name: string | null
  p_image: string | null
  tp_id: number
}

/**
 * Model place_type
 */

export type place_type = {
  tp_id: number
  tp_name: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Countries
 * const countries = await prisma.country.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Countries
   * const countries = await prisma.country.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.country`: Exposes CRUD operations for the **country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.countryDelegate<GlobalReject>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.historyDelegate<GlobalReject>;

  /**
   * `prisma.krathong`: Exposes CRUD operations for the **krathong** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Krathongs
    * const krathongs = await prisma.krathong.findMany()
    * ```
    */
  get krathong(): Prisma.krathongDelegate<GlobalReject>;

  /**
   * `prisma.kt_type`: Exposes CRUD operations for the **kt_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kt_types
    * const kt_types = await prisma.kt_type.findMany()
    * ```
    */
  get kt_type(): Prisma.kt_typeDelegate<GlobalReject>;

  /**
   * `prisma.person`: Exposes CRUD operations for the **person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.personDelegate<GlobalReject>;

  /**
   * `prisma.person_role`: Exposes CRUD operations for the **person_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Person_roles
    * const person_roles = await prisma.person_role.findMany()
    * ```
    */
  get person_role(): Prisma.person_roleDelegate<GlobalReject>;

  /**
   * `prisma.place`: Exposes CRUD operations for the **place** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Places
    * const places = await prisma.place.findMany()
    * ```
    */
  get place(): Prisma.placeDelegate<GlobalReject>;

  /**
   * `prisma.place_type`: Exposes CRUD operations for the **place_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Place_types
    * const place_types = await prisma.place_type.findMany()
    * ```
    */
  get place_type(): Prisma.place_typeDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.30.3
   * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    country: 'country',
    history: 'history',
    krathong: 'krathong',
    kt_type: 'kt_type',
    person: 'person',
    person_role: 'person_role',
    place: 'place',
    place_type: 'place_type'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model country
   */


  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
    max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    ct_id: number | null
  }

  export type CountrySumAggregateOutputType = {
    ct_id: number | null
  }

  export type CountryMinAggregateOutputType = {
    ct_id: number | null
    country: string | null
  }

  export type CountryMaxAggregateOutputType = {
    ct_id: number | null
    country: string | null
  }

  export type CountryCountAggregateOutputType = {
    ct_id: number
    country: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    ct_id?: true
  }

  export type CountrySumAggregateInputType = {
    ct_id?: true
  }

  export type CountryMinAggregateInputType = {
    ct_id?: true
    country?: true
  }

  export type CountryMaxAggregateInputType = {
    ct_id?: true
    country?: true
  }

  export type CountryCountAggregateInputType = {
    ct_id?: true
    country?: true
    _all?: true
  }

  export type CountryAggregateArgs = {
    /**
     * Filter which country to aggregate.
     * 
    **/
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     * 
    **/
    orderBy?: Enumerable<countryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }


    
    
  export type CountryGroupByArgs = {
    where?: countryWhereInput
    orderBy?: Enumerable<countryOrderByInput>
    by: Array<CountryScalarFieldEnum>
    having?: countryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }


  export type CountryGroupByOutputType = {
    ct_id: number
    country: string | null
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Promise<
    Array<
      PickArray<CountryGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CountryGroupByOutputType[P]> 
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      > 
    >


  export type countrySelect = {
    ct_id?: boolean
    country?: boolean
    person?: boolean | personFindManyArgs
  }

  export type countryInclude = {
    person?: boolean | personFindManyArgs
  }

  export type countryGetPayload<
    S extends boolean | null | undefined | countryArgs,
    U = keyof S
      > = S extends true
        ? country
    : S extends undefined
    ? never
    : S extends countryArgs | countryFindManyArgs
    ?'include' extends U
    ? country  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'person'
        ? Array < personGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof country ?country [P]
  : 
          P extends 'person'
        ? Array < personGetPayload<S['select'][P]>>  : never
  } 
    : country
  : country


  type countryCountArgs = Merge<
    Omit<countryFindManyArgs, 'select' | 'include'> & {
      select?: CountryCountAggregateInputType | true
    }
  >

  export interface countryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Country that matches the filter.
     * @param {countryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends countryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, countryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'country'> extends True ? CheckSelect<T, Prisma__countryClient<country>, Prisma__countryClient<countryGetPayload<T>>> : CheckSelect<T, Prisma__countryClient<country | null >, Prisma__countryClient<countryGetPayload<T> | null >>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends countryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, countryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'country'> extends True ? CheckSelect<T, Prisma__countryClient<country>, Prisma__countryClient<countryGetPayload<T>>> : CheckSelect<T, Prisma__countryClient<country | null >, Prisma__countryClient<countryGetPayload<T> | null >>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `ct_id`
     * const countryWithCt_idOnly = await prisma.country.findMany({ select: { ct_id: true } })
     * 
    **/
    findMany<T extends countryFindManyArgs>(
      args?: SelectSubset<T, countryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<country>>, PrismaPromise<Array<countryGetPayload<T>>>>

    /**
     * Create a Country.
     * @param {countryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
    **/
    create<T extends countryCreateArgs>(
      args: SelectSubset<T, countryCreateArgs>
    ): CheckSelect<T, Prisma__countryClient<country>, Prisma__countryClient<countryGetPayload<T>>>

    /**
     * Create many Countries.
     *     @param {countryCreateManyArgs} args - Arguments to create many Countries.
     *     @example
     *     // Create many Countries
     *     const country = await prisma.country.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends countryCreateManyArgs>(
      args?: SelectSubset<T, countryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Country.
     * @param {countryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
    **/
    delete<T extends countryDeleteArgs>(
      args: SelectSubset<T, countryDeleteArgs>
    ): CheckSelect<T, Prisma__countryClient<country>, Prisma__countryClient<countryGetPayload<T>>>

    /**
     * Update one Country.
     * @param {countryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends countryUpdateArgs>(
      args: SelectSubset<T, countryUpdateArgs>
    ): CheckSelect<T, Prisma__countryClient<country>, Prisma__countryClient<countryGetPayload<T>>>

    /**
     * Delete zero or more Countries.
     * @param {countryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends countryDeleteManyArgs>(
      args?: SelectSubset<T, countryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends countryUpdateManyArgs>(
      args: SelectSubset<T, countryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {countryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
    **/
    upsert<T extends countryUpsertArgs>(
      args: SelectSubset<T, countryUpsertArgs>
    ): CheckSelect<T, Prisma__countryClient<country>, Prisma__countryClient<countryGetPayload<T>>>

    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends countryCountArgs>(
      args?: Subset<T, countryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__countryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends personFindManyArgs = {}>(args?: Subset<T, personFindManyArgs>): CheckSelect<T, PrismaPromise<Array<person>>, PrismaPromise<Array<personGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * country findUnique
   */
  export type countryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * Throw an Error if a country can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which country to fetch.
     * 
    **/
    where: countryWhereUniqueInput
  }


  /**
   * country findFirst
   */
  export type countryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * Throw an Error if a country can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which country to fetch.
     * 
    **/
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     * 
    **/
    orderBy?: Enumerable<countryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for countries.
     * 
    **/
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of countries.
     * 
    **/
    distinct?: Enumerable<CountryScalarFieldEnum>
  }


  /**
   * country findMany
   */
  export type countryFindManyArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * Filter, which countries to fetch.
     * 
    **/
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     * 
    **/
    orderBy?: Enumerable<countryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing countries.
     * 
    **/
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CountryScalarFieldEnum>
  }


  /**
   * country create
   */
  export type countryCreateArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * The data needed to create a country.
     * 
    **/
    data: XOR<countryCreateInput, countryUncheckedCreateInput>
  }


  /**
   * country createMany
   */
  export type countryCreateManyArgs = {
    data: Enumerable<countryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * country update
   */
  export type countryUpdateArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * The data needed to update a country.
     * 
    **/
    data: XOR<countryUpdateInput, countryUncheckedUpdateInput>
    /**
     * Choose, which country to update.
     * 
    **/
    where: countryWhereUniqueInput
  }


  /**
   * country updateMany
   */
  export type countryUpdateManyArgs = {
    data: XOR<countryUpdateManyMutationInput, countryUncheckedUpdateManyInput>
    where?: countryWhereInput
  }


  /**
   * country upsert
   */
  export type countryUpsertArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * The filter to search for the country to update in case it exists.
     * 
    **/
    where: countryWhereUniqueInput
    /**
     * In case the country found by the `where` argument doesn't exist, create a new country with this data.
     * 
    **/
    create: XOR<countryCreateInput, countryUncheckedCreateInput>
    /**
     * In case the country was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<countryUpdateInput, countryUncheckedUpdateInput>
  }


  /**
   * country delete
   */
  export type countryDeleteArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
    /**
     * Filter which country to delete.
     * 
    **/
    where: countryWhereUniqueInput
  }


  /**
   * country deleteMany
   */
  export type countryDeleteManyArgs = {
    where?: countryWhereInput
  }


  /**
   * country without action
   */
  export type countryArgs = {
    /**
     * Select specific fields to fetch from the country
     * 
    **/
    select?: countrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: countryInclude | null
  }



  /**
   * Model history
   */


  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
    max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    h_id: number | null
    p_id: number | null
    kt_id: number | null
    user_id: number | null
  }

  export type HistorySumAggregateOutputType = {
    h_id: number | null
    p_id: number | null
    kt_id: number | null
    user_id: number | null
  }

  export type HistoryMinAggregateOutputType = {
    h_id: number | null
    h_date: Date | null
    wish: string | null
    p_id: number | null
    kt_id: number | null
    user_id: number | null
  }

  export type HistoryMaxAggregateOutputType = {
    h_id: number | null
    h_date: Date | null
    wish: string | null
    p_id: number | null
    kt_id: number | null
    user_id: number | null
  }

  export type HistoryCountAggregateOutputType = {
    h_id: number
    h_date: number
    wish: number
    p_id: number
    kt_id: number
    user_id: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    h_id?: true
    p_id?: true
    kt_id?: true
    user_id?: true
  }

  export type HistorySumAggregateInputType = {
    h_id?: true
    p_id?: true
    kt_id?: true
    user_id?: true
  }

  export type HistoryMinAggregateInputType = {
    h_id?: true
    h_date?: true
    wish?: true
    p_id?: true
    kt_id?: true
    user_id?: true
  }

  export type HistoryMaxAggregateInputType = {
    h_id?: true
    h_date?: true
    wish?: true
    p_id?: true
    kt_id?: true
    user_id?: true
  }

  export type HistoryCountAggregateInputType = {
    h_id?: true
    h_date?: true
    wish?: true
    p_id?: true
    kt_id?: true
    user_id?: true
    _all?: true
  }

  export type HistoryAggregateArgs = {
    /**
     * Filter which history to aggregate.
     * 
    **/
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     * 
    **/
    orderBy?: Enumerable<historyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }


    
    
  export type HistoryGroupByArgs = {
    where?: historyWhereInput
    orderBy?: Enumerable<historyOrderByInput>
    by: Array<HistoryScalarFieldEnum>
    having?: historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }


  export type HistoryGroupByOutputType = {
    h_id: number
    h_date: Date | null
    wish: string | null
    p_id: number
    kt_id: number | null
    user_id: number | null
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Promise<
    Array<
      PickArray<HistoryGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], HistoryGroupByOutputType[P]> 
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      > 
    >


  export type historySelect = {
    h_id?: boolean
    h_date?: boolean
    wish?: boolean
    p_id?: boolean
    kt_id?: boolean
    user_id?: boolean
    krathong?: boolean | krathongArgs
    place?: boolean | placeArgs
    person?: boolean | personArgs
  }

  export type historyInclude = {
    krathong?: boolean | krathongArgs
    place?: boolean | placeArgs
    person?: boolean | personArgs
  }

  export type historyGetPayload<
    S extends boolean | null | undefined | historyArgs,
    U = keyof S
      > = S extends true
        ? history
    : S extends undefined
    ? never
    : S extends historyArgs | historyFindManyArgs
    ?'include' extends U
    ? history  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'krathong'
        ? krathongGetPayload<S['include'][P]> | null :
        P extends 'place'
        ? placeGetPayload<S['include'][P]> :
        P extends 'person'
        ? personGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof history ?history [P]
  : 
          P extends 'krathong'
        ? krathongGetPayload<S['select'][P]> | null :
        P extends 'place'
        ? placeGetPayload<S['select'][P]> :
        P extends 'person'
        ? personGetPayload<S['select'][P]> | null : never
  } 
    : history
  : history


  type historyCountArgs = Merge<
    Omit<historyFindManyArgs, 'select' | 'include'> & {
      select?: HistoryCountAggregateInputType | true
    }
  >

  export interface historyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one History that matches the filter.
     * @param {historyFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends historyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, historyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'history'> extends True ? CheckSelect<T, Prisma__historyClient<history>, Prisma__historyClient<historyGetPayload<T>>> : CheckSelect<T, Prisma__historyClient<history | null >, Prisma__historyClient<historyGetPayload<T> | null >>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends historyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, historyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'history'> extends True ? CheckSelect<T, Prisma__historyClient<history>, Prisma__historyClient<historyGetPayload<T>>> : CheckSelect<T, Prisma__historyClient<history | null >, Prisma__historyClient<historyGetPayload<T> | null >>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `h_id`
     * const historyWithH_idOnly = await prisma.history.findMany({ select: { h_id: true } })
     * 
    **/
    findMany<T extends historyFindManyArgs>(
      args?: SelectSubset<T, historyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<history>>, PrismaPromise<Array<historyGetPayload<T>>>>

    /**
     * Create a History.
     * @param {historyCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends historyCreateArgs>(
      args: SelectSubset<T, historyCreateArgs>
    ): CheckSelect<T, Prisma__historyClient<history>, Prisma__historyClient<historyGetPayload<T>>>

    /**
     * Create many Histories.
     *     @param {historyCreateManyArgs} args - Arguments to create many Histories.
     *     @example
     *     // Create many Histories
     *     const history = await prisma.history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends historyCreateManyArgs>(
      args?: SelectSubset<T, historyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {historyDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends historyDeleteArgs>(
      args: SelectSubset<T, historyDeleteArgs>
    ): CheckSelect<T, Prisma__historyClient<history>, Prisma__historyClient<historyGetPayload<T>>>

    /**
     * Update one History.
     * @param {historyUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends historyUpdateArgs>(
      args: SelectSubset<T, historyUpdateArgs>
    ): CheckSelect<T, Prisma__historyClient<history>, Prisma__historyClient<historyGetPayload<T>>>

    /**
     * Delete zero or more Histories.
     * @param {historyDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends historyDeleteManyArgs>(
      args?: SelectSubset<T, historyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends historyUpdateManyArgs>(
      args: SelectSubset<T, historyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {historyUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends historyUpsertArgs>(
      args: SelectSubset<T, historyUpsertArgs>
    ): CheckSelect<T, Prisma__historyClient<history>, Prisma__historyClient<historyGetPayload<T>>>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historyCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends historyCountArgs>(
      args?: Subset<T, historyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__historyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    krathong<T extends krathongArgs = {}>(args?: Subset<T, krathongArgs>): CheckSelect<T, Prisma__krathongClient<krathong | null >, Prisma__krathongClient<krathongGetPayload<T> | null >>;

    place<T extends placeArgs = {}>(args?: Subset<T, placeArgs>): CheckSelect<T, Prisma__placeClient<place | null >, Prisma__placeClient<placeGetPayload<T> | null >>;

    person<T extends personArgs = {}>(args?: Subset<T, personArgs>): CheckSelect<T, Prisma__personClient<person | null >, Prisma__personClient<personGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * history findUnique
   */
  export type historyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * Throw an Error if a history can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which history to fetch.
     * 
    **/
    where: historyWhereUniqueInput
  }


  /**
   * history findFirst
   */
  export type historyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * Throw an Error if a history can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which history to fetch.
     * 
    **/
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     * 
    **/
    orderBy?: Enumerable<historyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for histories.
     * 
    **/
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of histories.
     * 
    **/
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }


  /**
   * history findMany
   */
  export type historyFindManyArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * Filter, which histories to fetch.
     * 
    **/
    where?: historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of histories to fetch.
     * 
    **/
    orderBy?: Enumerable<historyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing histories.
     * 
    **/
    cursor?: historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` histories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }


  /**
   * history create
   */
  export type historyCreateArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * The data needed to create a history.
     * 
    **/
    data: XOR<historyCreateInput, historyUncheckedCreateInput>
  }


  /**
   * history createMany
   */
  export type historyCreateManyArgs = {
    data: Enumerable<historyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * history update
   */
  export type historyUpdateArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * The data needed to update a history.
     * 
    **/
    data: XOR<historyUpdateInput, historyUncheckedUpdateInput>
    /**
     * Choose, which history to update.
     * 
    **/
    where: historyWhereUniqueInput
  }


  /**
   * history updateMany
   */
  export type historyUpdateManyArgs = {
    data: XOR<historyUpdateManyMutationInput, historyUncheckedUpdateManyInput>
    where?: historyWhereInput
  }


  /**
   * history upsert
   */
  export type historyUpsertArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * The filter to search for the history to update in case it exists.
     * 
    **/
    where: historyWhereUniqueInput
    /**
     * In case the history found by the `where` argument doesn't exist, create a new history with this data.
     * 
    **/
    create: XOR<historyCreateInput, historyUncheckedCreateInput>
    /**
     * In case the history was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<historyUpdateInput, historyUncheckedUpdateInput>
  }


  /**
   * history delete
   */
  export type historyDeleteArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
    /**
     * Filter which history to delete.
     * 
    **/
    where: historyWhereUniqueInput
  }


  /**
   * history deleteMany
   */
  export type historyDeleteManyArgs = {
    where?: historyWhereInput
  }


  /**
   * history without action
   */
  export type historyArgs = {
    /**
     * Select specific fields to fetch from the history
     * 
    **/
    select?: historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historyInclude | null
  }



  /**
   * Model krathong
   */


  export type AggregateKrathong = {
    _count: KrathongCountAggregateOutputType | null
    count: KrathongCountAggregateOutputType | null
    _avg: KrathongAvgAggregateOutputType | null
    avg: KrathongAvgAggregateOutputType | null
    _sum: KrathongSumAggregateOutputType | null
    sum: KrathongSumAggregateOutputType | null
    _min: KrathongMinAggregateOutputType | null
    min: KrathongMinAggregateOutputType | null
    _max: KrathongMaxAggregateOutputType | null
    max: KrathongMaxAggregateOutputType | null
  }

  export type KrathongAvgAggregateOutputType = {
    kt_id: number | null
    amount: number | null
    t_id: number | null
  }

  export type KrathongSumAggregateOutputType = {
    kt_id: number | null
    amount: number | null
    t_id: number | null
  }

  export type KrathongMinAggregateOutputType = {
    kt_id: number | null
    kt_name: string | null
    amount: number | null
    kt_image: string | null
    detail: string | null
    t_id: number | null
  }

  export type KrathongMaxAggregateOutputType = {
    kt_id: number | null
    kt_name: string | null
    amount: number | null
    kt_image: string | null
    detail: string | null
    t_id: number | null
  }

  export type KrathongCountAggregateOutputType = {
    kt_id: number
    kt_name: number
    amount: number
    kt_image: number
    detail: number
    t_id: number
    _all: number
  }


  export type KrathongAvgAggregateInputType = {
    kt_id?: true
    amount?: true
    t_id?: true
  }

  export type KrathongSumAggregateInputType = {
    kt_id?: true
    amount?: true
    t_id?: true
  }

  export type KrathongMinAggregateInputType = {
    kt_id?: true
    kt_name?: true
    amount?: true
    kt_image?: true
    detail?: true
    t_id?: true
  }

  export type KrathongMaxAggregateInputType = {
    kt_id?: true
    kt_name?: true
    amount?: true
    kt_image?: true
    detail?: true
    t_id?: true
  }

  export type KrathongCountAggregateInputType = {
    kt_id?: true
    kt_name?: true
    amount?: true
    kt_image?: true
    detail?: true
    t_id?: true
    _all?: true
  }

  export type KrathongAggregateArgs = {
    /**
     * Filter which krathong to aggregate.
     * 
    **/
    where?: krathongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of krathongs to fetch.
     * 
    **/
    orderBy?: Enumerable<krathongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: krathongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` krathongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` krathongs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned krathongs
    **/
    _count?: true | KrathongCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | KrathongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KrathongAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: KrathongAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KrathongSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: KrathongSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KrathongMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: KrathongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KrathongMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: KrathongMaxAggregateInputType
  }

  export type GetKrathongAggregateType<T extends KrathongAggregateArgs> = {
        [P in keyof T & keyof AggregateKrathong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKrathong[P]>
      : GetScalarType<T[P], AggregateKrathong[P]>
  }


    
    
  export type KrathongGroupByArgs = {
    where?: krathongWhereInput
    orderBy?: Enumerable<krathongOrderByInput>
    by: Array<KrathongScalarFieldEnum>
    having?: krathongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KrathongCountAggregateInputType | true
    _avg?: KrathongAvgAggregateInputType
    _sum?: KrathongSumAggregateInputType
    _min?: KrathongMinAggregateInputType
    _max?: KrathongMaxAggregateInputType
  }


  export type KrathongGroupByOutputType = {
    kt_id: number
    kt_name: string | null
    amount: number | null
    kt_image: string | null
    detail: string | null
    t_id: number
    _count: KrathongCountAggregateOutputType | null
    _avg: KrathongAvgAggregateOutputType | null
    _sum: KrathongSumAggregateOutputType | null
    _min: KrathongMinAggregateOutputType | null
    _max: KrathongMaxAggregateOutputType | null
  }

  type GetKrathongGroupByPayload<T extends KrathongGroupByArgs> = Promise<
    Array<
      PickArray<KrathongGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof KrathongGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], KrathongGroupByOutputType[P]> 
            : GetScalarType<T[P], KrathongGroupByOutputType[P]>
        }
      > 
    >


  export type krathongSelect = {
    kt_id?: boolean
    kt_name?: boolean
    amount?: boolean
    kt_image?: boolean
    detail?: boolean
    t_id?: boolean
    kt_type?: boolean | kt_typeArgs
    history?: boolean | historyFindManyArgs
  }

  export type krathongInclude = {
    kt_type?: boolean | kt_typeArgs
    history?: boolean | historyFindManyArgs
  }

  export type krathongGetPayload<
    S extends boolean | null | undefined | krathongArgs,
    U = keyof S
      > = S extends true
        ? krathong
    : S extends undefined
    ? never
    : S extends krathongArgs | krathongFindManyArgs
    ?'include' extends U
    ? krathong  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'kt_type'
        ? kt_typeGetPayload<S['include'][P]> :
        P extends 'history'
        ? Array < historyGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof krathong ?krathong [P]
  : 
          P extends 'kt_type'
        ? kt_typeGetPayload<S['select'][P]> :
        P extends 'history'
        ? Array < historyGetPayload<S['select'][P]>>  : never
  } 
    : krathong
  : krathong


  type krathongCountArgs = Merge<
    Omit<krathongFindManyArgs, 'select' | 'include'> & {
      select?: KrathongCountAggregateInputType | true
    }
  >

  export interface krathongDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Krathong that matches the filter.
     * @param {krathongFindUniqueArgs} args - Arguments to find a Krathong
     * @example
     * // Get one Krathong
     * const krathong = await prisma.krathong.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends krathongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, krathongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'krathong'> extends True ? CheckSelect<T, Prisma__krathongClient<krathong>, Prisma__krathongClient<krathongGetPayload<T>>> : CheckSelect<T, Prisma__krathongClient<krathong | null >, Prisma__krathongClient<krathongGetPayload<T> | null >>

    /**
     * Find the first Krathong that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {krathongFindFirstArgs} args - Arguments to find a Krathong
     * @example
     * // Get one Krathong
     * const krathong = await prisma.krathong.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends krathongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, krathongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'krathong'> extends True ? CheckSelect<T, Prisma__krathongClient<krathong>, Prisma__krathongClient<krathongGetPayload<T>>> : CheckSelect<T, Prisma__krathongClient<krathong | null >, Prisma__krathongClient<krathongGetPayload<T> | null >>

    /**
     * Find zero or more Krathongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {krathongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Krathongs
     * const krathongs = await prisma.krathong.findMany()
     * 
     * // Get first 10 Krathongs
     * const krathongs = await prisma.krathong.findMany({ take: 10 })
     * 
     * // Only select the `kt_id`
     * const krathongWithKt_idOnly = await prisma.krathong.findMany({ select: { kt_id: true } })
     * 
    **/
    findMany<T extends krathongFindManyArgs>(
      args?: SelectSubset<T, krathongFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<krathong>>, PrismaPromise<Array<krathongGetPayload<T>>>>

    /**
     * Create a Krathong.
     * @param {krathongCreateArgs} args - Arguments to create a Krathong.
     * @example
     * // Create one Krathong
     * const Krathong = await prisma.krathong.create({
     *   data: {
     *     // ... data to create a Krathong
     *   }
     * })
     * 
    **/
    create<T extends krathongCreateArgs>(
      args: SelectSubset<T, krathongCreateArgs>
    ): CheckSelect<T, Prisma__krathongClient<krathong>, Prisma__krathongClient<krathongGetPayload<T>>>

    /**
     * Create many Krathongs.
     *     @param {krathongCreateManyArgs} args - Arguments to create many Krathongs.
     *     @example
     *     // Create many Krathongs
     *     const krathong = await prisma.krathong.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends krathongCreateManyArgs>(
      args?: SelectSubset<T, krathongCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Krathong.
     * @param {krathongDeleteArgs} args - Arguments to delete one Krathong.
     * @example
     * // Delete one Krathong
     * const Krathong = await prisma.krathong.delete({
     *   where: {
     *     // ... filter to delete one Krathong
     *   }
     * })
     * 
    **/
    delete<T extends krathongDeleteArgs>(
      args: SelectSubset<T, krathongDeleteArgs>
    ): CheckSelect<T, Prisma__krathongClient<krathong>, Prisma__krathongClient<krathongGetPayload<T>>>

    /**
     * Update one Krathong.
     * @param {krathongUpdateArgs} args - Arguments to update one Krathong.
     * @example
     * // Update one Krathong
     * const krathong = await prisma.krathong.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends krathongUpdateArgs>(
      args: SelectSubset<T, krathongUpdateArgs>
    ): CheckSelect<T, Prisma__krathongClient<krathong>, Prisma__krathongClient<krathongGetPayload<T>>>

    /**
     * Delete zero or more Krathongs.
     * @param {krathongDeleteManyArgs} args - Arguments to filter Krathongs to delete.
     * @example
     * // Delete a few Krathongs
     * const { count } = await prisma.krathong.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends krathongDeleteManyArgs>(
      args?: SelectSubset<T, krathongDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Krathongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {krathongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Krathongs
     * const krathong = await prisma.krathong.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends krathongUpdateManyArgs>(
      args: SelectSubset<T, krathongUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Krathong.
     * @param {krathongUpsertArgs} args - Arguments to update or create a Krathong.
     * @example
     * // Update or create a Krathong
     * const krathong = await prisma.krathong.upsert({
     *   create: {
     *     // ... data to create a Krathong
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Krathong we want to update
     *   }
     * })
    **/
    upsert<T extends krathongUpsertArgs>(
      args: SelectSubset<T, krathongUpsertArgs>
    ): CheckSelect<T, Prisma__krathongClient<krathong>, Prisma__krathongClient<krathongGetPayload<T>>>

    /**
     * Count the number of Krathongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {krathongCountArgs} args - Arguments to filter Krathongs to count.
     * @example
     * // Count the number of Krathongs
     * const count = await prisma.krathong.count({
     *   where: {
     *     // ... the filter for the Krathongs we want to count
     *   }
     * })
    **/
    count<T extends krathongCountArgs>(
      args?: Subset<T, krathongCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KrathongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Krathong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KrathongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KrathongAggregateArgs>(args: Subset<T, KrathongAggregateArgs>): PrismaPromise<GetKrathongAggregateType<T>>

    /**
     * Group by Krathong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KrathongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KrathongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KrathongGroupByArgs['orderBy'] }
        : { orderBy?: KrathongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KrathongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKrathongGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for krathong.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__krathongClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    kt_type<T extends kt_typeArgs = {}>(args?: Subset<T, kt_typeArgs>): CheckSelect<T, Prisma__kt_typeClient<kt_type | null >, Prisma__kt_typeClient<kt_typeGetPayload<T> | null >>;

    history<T extends historyFindManyArgs = {}>(args?: Subset<T, historyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<history>>, PrismaPromise<Array<historyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * krathong findUnique
   */
  export type krathongFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * Throw an Error if a krathong can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which krathong to fetch.
     * 
    **/
    where: krathongWhereUniqueInput
  }


  /**
   * krathong findFirst
   */
  export type krathongFindFirstArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * Throw an Error if a krathong can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which krathong to fetch.
     * 
    **/
    where?: krathongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of krathongs to fetch.
     * 
    **/
    orderBy?: Enumerable<krathongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for krathongs.
     * 
    **/
    cursor?: krathongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` krathongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` krathongs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of krathongs.
     * 
    **/
    distinct?: Enumerable<KrathongScalarFieldEnum>
  }


  /**
   * krathong findMany
   */
  export type krathongFindManyArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * Filter, which krathongs to fetch.
     * 
    **/
    where?: krathongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of krathongs to fetch.
     * 
    **/
    orderBy?: Enumerable<krathongOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing krathongs.
     * 
    **/
    cursor?: krathongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` krathongs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` krathongs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KrathongScalarFieldEnum>
  }


  /**
   * krathong create
   */
  export type krathongCreateArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * The data needed to create a krathong.
     * 
    **/
    data: XOR<krathongCreateInput, krathongUncheckedCreateInput>
  }


  /**
   * krathong createMany
   */
  export type krathongCreateManyArgs = {
    data: Enumerable<krathongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * krathong update
   */
  export type krathongUpdateArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * The data needed to update a krathong.
     * 
    **/
    data: XOR<krathongUpdateInput, krathongUncheckedUpdateInput>
    /**
     * Choose, which krathong to update.
     * 
    **/
    where: krathongWhereUniqueInput
  }


  /**
   * krathong updateMany
   */
  export type krathongUpdateManyArgs = {
    data: XOR<krathongUpdateManyMutationInput, krathongUncheckedUpdateManyInput>
    where?: krathongWhereInput
  }


  /**
   * krathong upsert
   */
  export type krathongUpsertArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * The filter to search for the krathong to update in case it exists.
     * 
    **/
    where: krathongWhereUniqueInput
    /**
     * In case the krathong found by the `where` argument doesn't exist, create a new krathong with this data.
     * 
    **/
    create: XOR<krathongCreateInput, krathongUncheckedCreateInput>
    /**
     * In case the krathong was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<krathongUpdateInput, krathongUncheckedUpdateInput>
  }


  /**
   * krathong delete
   */
  export type krathongDeleteArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
    /**
     * Filter which krathong to delete.
     * 
    **/
    where: krathongWhereUniqueInput
  }


  /**
   * krathong deleteMany
   */
  export type krathongDeleteManyArgs = {
    where?: krathongWhereInput
  }


  /**
   * krathong without action
   */
  export type krathongArgs = {
    /**
     * Select specific fields to fetch from the krathong
     * 
    **/
    select?: krathongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: krathongInclude | null
  }



  /**
   * Model kt_type
   */


  export type AggregateKt_type = {
    _count: Kt_typeCountAggregateOutputType | null
    count: Kt_typeCountAggregateOutputType | null
    _avg: Kt_typeAvgAggregateOutputType | null
    avg: Kt_typeAvgAggregateOutputType | null
    _sum: Kt_typeSumAggregateOutputType | null
    sum: Kt_typeSumAggregateOutputType | null
    _min: Kt_typeMinAggregateOutputType | null
    min: Kt_typeMinAggregateOutputType | null
    _max: Kt_typeMaxAggregateOutputType | null
    max: Kt_typeMaxAggregateOutputType | null
  }

  export type Kt_typeAvgAggregateOutputType = {
    t_id: number | null
  }

  export type Kt_typeSumAggregateOutputType = {
    t_id: number | null
  }

  export type Kt_typeMinAggregateOutputType = {
    t_id: number | null
    type_name: string | null
  }

  export type Kt_typeMaxAggregateOutputType = {
    t_id: number | null
    type_name: string | null
  }

  export type Kt_typeCountAggregateOutputType = {
    t_id: number
    type_name: number
    _all: number
  }


  export type Kt_typeAvgAggregateInputType = {
    t_id?: true
  }

  export type Kt_typeSumAggregateInputType = {
    t_id?: true
  }

  export type Kt_typeMinAggregateInputType = {
    t_id?: true
    type_name?: true
  }

  export type Kt_typeMaxAggregateInputType = {
    t_id?: true
    type_name?: true
  }

  export type Kt_typeCountAggregateInputType = {
    t_id?: true
    type_name?: true
    _all?: true
  }

  export type Kt_typeAggregateArgs = {
    /**
     * Filter which kt_type to aggregate.
     * 
    **/
    where?: kt_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kt_types to fetch.
     * 
    **/
    orderBy?: Enumerable<kt_typeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: kt_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kt_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kt_types.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kt_types
    **/
    _count?: true | Kt_typeCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Kt_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Kt_typeAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Kt_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Kt_typeSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Kt_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Kt_typeMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Kt_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Kt_typeMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Kt_typeMaxAggregateInputType
  }

  export type GetKt_typeAggregateType<T extends Kt_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateKt_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKt_type[P]>
      : GetScalarType<T[P], AggregateKt_type[P]>
  }


    
    
  export type Kt_typeGroupByArgs = {
    where?: kt_typeWhereInput
    orderBy?: Enumerable<kt_typeOrderByInput>
    by: Array<Kt_typeScalarFieldEnum>
    having?: kt_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Kt_typeCountAggregateInputType | true
    _avg?: Kt_typeAvgAggregateInputType
    _sum?: Kt_typeSumAggregateInputType
    _min?: Kt_typeMinAggregateInputType
    _max?: Kt_typeMaxAggregateInputType
  }


  export type Kt_typeGroupByOutputType = {
    t_id: number
    type_name: string | null
    _count: Kt_typeCountAggregateOutputType | null
    _avg: Kt_typeAvgAggregateOutputType | null
    _sum: Kt_typeSumAggregateOutputType | null
    _min: Kt_typeMinAggregateOutputType | null
    _max: Kt_typeMaxAggregateOutputType | null
  }

  type GetKt_typeGroupByPayload<T extends Kt_typeGroupByArgs> = Promise<
    Array<
      PickArray<Kt_typeGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Kt_typeGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Kt_typeGroupByOutputType[P]> 
            : GetScalarType<T[P], Kt_typeGroupByOutputType[P]>
        }
      > 
    >


  export type kt_typeSelect = {
    t_id?: boolean
    type_name?: boolean
    krathong?: boolean | krathongFindManyArgs
  }

  export type kt_typeInclude = {
    krathong?: boolean | krathongFindManyArgs
  }

  export type kt_typeGetPayload<
    S extends boolean | null | undefined | kt_typeArgs,
    U = keyof S
      > = S extends true
        ? kt_type
    : S extends undefined
    ? never
    : S extends kt_typeArgs | kt_typeFindManyArgs
    ?'include' extends U
    ? kt_type  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'krathong'
        ? Array < krathongGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof kt_type ?kt_type [P]
  : 
          P extends 'krathong'
        ? Array < krathongGetPayload<S['select'][P]>>  : never
  } 
    : kt_type
  : kt_type


  type kt_typeCountArgs = Merge<
    Omit<kt_typeFindManyArgs, 'select' | 'include'> & {
      select?: Kt_typeCountAggregateInputType | true
    }
  >

  export interface kt_typeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Kt_type that matches the filter.
     * @param {kt_typeFindUniqueArgs} args - Arguments to find a Kt_type
     * @example
     * // Get one Kt_type
     * const kt_type = await prisma.kt_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends kt_typeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, kt_typeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'kt_type'> extends True ? CheckSelect<T, Prisma__kt_typeClient<kt_type>, Prisma__kt_typeClient<kt_typeGetPayload<T>>> : CheckSelect<T, Prisma__kt_typeClient<kt_type | null >, Prisma__kt_typeClient<kt_typeGetPayload<T> | null >>

    /**
     * Find the first Kt_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kt_typeFindFirstArgs} args - Arguments to find a Kt_type
     * @example
     * // Get one Kt_type
     * const kt_type = await prisma.kt_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends kt_typeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, kt_typeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'kt_type'> extends True ? CheckSelect<T, Prisma__kt_typeClient<kt_type>, Prisma__kt_typeClient<kt_typeGetPayload<T>>> : CheckSelect<T, Prisma__kt_typeClient<kt_type | null >, Prisma__kt_typeClient<kt_typeGetPayload<T> | null >>

    /**
     * Find zero or more Kt_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kt_typeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kt_types
     * const kt_types = await prisma.kt_type.findMany()
     * 
     * // Get first 10 Kt_types
     * const kt_types = await prisma.kt_type.findMany({ take: 10 })
     * 
     * // Only select the `t_id`
     * const kt_typeWithT_idOnly = await prisma.kt_type.findMany({ select: { t_id: true } })
     * 
    **/
    findMany<T extends kt_typeFindManyArgs>(
      args?: SelectSubset<T, kt_typeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<kt_type>>, PrismaPromise<Array<kt_typeGetPayload<T>>>>

    /**
     * Create a Kt_type.
     * @param {kt_typeCreateArgs} args - Arguments to create a Kt_type.
     * @example
     * // Create one Kt_type
     * const Kt_type = await prisma.kt_type.create({
     *   data: {
     *     // ... data to create a Kt_type
     *   }
     * })
     * 
    **/
    create<T extends kt_typeCreateArgs>(
      args: SelectSubset<T, kt_typeCreateArgs>
    ): CheckSelect<T, Prisma__kt_typeClient<kt_type>, Prisma__kt_typeClient<kt_typeGetPayload<T>>>

    /**
     * Create many Kt_types.
     *     @param {kt_typeCreateManyArgs} args - Arguments to create many Kt_types.
     *     @example
     *     // Create many Kt_types
     *     const kt_type = await prisma.kt_type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends kt_typeCreateManyArgs>(
      args?: SelectSubset<T, kt_typeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Kt_type.
     * @param {kt_typeDeleteArgs} args - Arguments to delete one Kt_type.
     * @example
     * // Delete one Kt_type
     * const Kt_type = await prisma.kt_type.delete({
     *   where: {
     *     // ... filter to delete one Kt_type
     *   }
     * })
     * 
    **/
    delete<T extends kt_typeDeleteArgs>(
      args: SelectSubset<T, kt_typeDeleteArgs>
    ): CheckSelect<T, Prisma__kt_typeClient<kt_type>, Prisma__kt_typeClient<kt_typeGetPayload<T>>>

    /**
     * Update one Kt_type.
     * @param {kt_typeUpdateArgs} args - Arguments to update one Kt_type.
     * @example
     * // Update one Kt_type
     * const kt_type = await prisma.kt_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends kt_typeUpdateArgs>(
      args: SelectSubset<T, kt_typeUpdateArgs>
    ): CheckSelect<T, Prisma__kt_typeClient<kt_type>, Prisma__kt_typeClient<kt_typeGetPayload<T>>>

    /**
     * Delete zero or more Kt_types.
     * @param {kt_typeDeleteManyArgs} args - Arguments to filter Kt_types to delete.
     * @example
     * // Delete a few Kt_types
     * const { count } = await prisma.kt_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends kt_typeDeleteManyArgs>(
      args?: SelectSubset<T, kt_typeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kt_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kt_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kt_types
     * const kt_type = await prisma.kt_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends kt_typeUpdateManyArgs>(
      args: SelectSubset<T, kt_typeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Kt_type.
     * @param {kt_typeUpsertArgs} args - Arguments to update or create a Kt_type.
     * @example
     * // Update or create a Kt_type
     * const kt_type = await prisma.kt_type.upsert({
     *   create: {
     *     // ... data to create a Kt_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kt_type we want to update
     *   }
     * })
    **/
    upsert<T extends kt_typeUpsertArgs>(
      args: SelectSubset<T, kt_typeUpsertArgs>
    ): CheckSelect<T, Prisma__kt_typeClient<kt_type>, Prisma__kt_typeClient<kt_typeGetPayload<T>>>

    /**
     * Count the number of Kt_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kt_typeCountArgs} args - Arguments to filter Kt_types to count.
     * @example
     * // Count the number of Kt_types
     * const count = await prisma.kt_type.count({
     *   where: {
     *     // ... the filter for the Kt_types we want to count
     *   }
     * })
    **/
    count<T extends kt_typeCountArgs>(
      args?: Subset<T, kt_typeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Kt_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kt_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kt_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Kt_typeAggregateArgs>(args: Subset<T, Kt_typeAggregateArgs>): PrismaPromise<GetKt_typeAggregateType<T>>

    /**
     * Group by Kt_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Kt_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Kt_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Kt_typeGroupByArgs['orderBy'] }
        : { orderBy?: Kt_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Kt_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKt_typeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for kt_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__kt_typeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    krathong<T extends krathongFindManyArgs = {}>(args?: Subset<T, krathongFindManyArgs>): CheckSelect<T, PrismaPromise<Array<krathong>>, PrismaPromise<Array<krathongGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * kt_type findUnique
   */
  export type kt_typeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * Throw an Error if a kt_type can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which kt_type to fetch.
     * 
    **/
    where: kt_typeWhereUniqueInput
  }


  /**
   * kt_type findFirst
   */
  export type kt_typeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * Throw an Error if a kt_type can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which kt_type to fetch.
     * 
    **/
    where?: kt_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kt_types to fetch.
     * 
    **/
    orderBy?: Enumerable<kt_typeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kt_types.
     * 
    **/
    cursor?: kt_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kt_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kt_types.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kt_types.
     * 
    **/
    distinct?: Enumerable<Kt_typeScalarFieldEnum>
  }


  /**
   * kt_type findMany
   */
  export type kt_typeFindManyArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * Filter, which kt_types to fetch.
     * 
    **/
    where?: kt_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kt_types to fetch.
     * 
    **/
    orderBy?: Enumerable<kt_typeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kt_types.
     * 
    **/
    cursor?: kt_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kt_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kt_types.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Kt_typeScalarFieldEnum>
  }


  /**
   * kt_type create
   */
  export type kt_typeCreateArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * The data needed to create a kt_type.
     * 
    **/
    data: XOR<kt_typeCreateInput, kt_typeUncheckedCreateInput>
  }


  /**
   * kt_type createMany
   */
  export type kt_typeCreateManyArgs = {
    data: Enumerable<kt_typeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * kt_type update
   */
  export type kt_typeUpdateArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * The data needed to update a kt_type.
     * 
    **/
    data: XOR<kt_typeUpdateInput, kt_typeUncheckedUpdateInput>
    /**
     * Choose, which kt_type to update.
     * 
    **/
    where: kt_typeWhereUniqueInput
  }


  /**
   * kt_type updateMany
   */
  export type kt_typeUpdateManyArgs = {
    data: XOR<kt_typeUpdateManyMutationInput, kt_typeUncheckedUpdateManyInput>
    where?: kt_typeWhereInput
  }


  /**
   * kt_type upsert
   */
  export type kt_typeUpsertArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * The filter to search for the kt_type to update in case it exists.
     * 
    **/
    where: kt_typeWhereUniqueInput
    /**
     * In case the kt_type found by the `where` argument doesn't exist, create a new kt_type with this data.
     * 
    **/
    create: XOR<kt_typeCreateInput, kt_typeUncheckedCreateInput>
    /**
     * In case the kt_type was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<kt_typeUpdateInput, kt_typeUncheckedUpdateInput>
  }


  /**
   * kt_type delete
   */
  export type kt_typeDeleteArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
    /**
     * Filter which kt_type to delete.
     * 
    **/
    where: kt_typeWhereUniqueInput
  }


  /**
   * kt_type deleteMany
   */
  export type kt_typeDeleteManyArgs = {
    where?: kt_typeWhereInput
  }


  /**
   * kt_type without action
   */
  export type kt_typeArgs = {
    /**
     * Select specific fields to fetch from the kt_type
     * 
    **/
    select?: kt_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: kt_typeInclude | null
  }



  /**
   * Model person
   */


  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
    max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    user_id: number | null
    role_id: number | null
    ct_id: number | null
  }

  export type PersonSumAggregateOutputType = {
    user_id: number | null
    role_id: number | null
    ct_id: number | null
  }

  export type PersonMinAggregateOutputType = {
    user_id: number | null
    fname: string | null
    lname: string | null
    username: string | null
    password: string | null
    email: string | null
    id_card: string | null
    phone: string | null
    role_id: number | null
    ct_id: number | null
  }

  export type PersonMaxAggregateOutputType = {
    user_id: number | null
    fname: string | null
    lname: string | null
    username: string | null
    password: string | null
    email: string | null
    id_card: string | null
    phone: string | null
    role_id: number | null
    ct_id: number | null
  }

  export type PersonCountAggregateOutputType = {
    user_id: number
    fname: number
    lname: number
    username: number
    password: number
    email: number
    id_card: number
    phone: number
    role_id: number
    ct_id: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    user_id?: true
    role_id?: true
    ct_id?: true
  }

  export type PersonSumAggregateInputType = {
    user_id?: true
    role_id?: true
    ct_id?: true
  }

  export type PersonMinAggregateInputType = {
    user_id?: true
    fname?: true
    lname?: true
    username?: true
    password?: true
    email?: true
    id_card?: true
    phone?: true
    role_id?: true
    ct_id?: true
  }

  export type PersonMaxAggregateInputType = {
    user_id?: true
    fname?: true
    lname?: true
    username?: true
    password?: true
    email?: true
    id_card?: true
    phone?: true
    role_id?: true
    ct_id?: true
  }

  export type PersonCountAggregateInputType = {
    user_id?: true
    fname?: true
    lname?: true
    username?: true
    password?: true
    email?: true
    id_card?: true
    phone?: true
    role_id?: true
    ct_id?: true
    _all?: true
  }

  export type PersonAggregateArgs = {
    /**
     * Filter which person to aggregate.
     * 
    **/
    where?: personWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of people to fetch.
     * 
    **/
    orderBy?: Enumerable<personOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: personWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` people from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` people.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned people
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }


    
    
  export type PersonGroupByArgs = {
    where?: personWhereInput
    orderBy?: Enumerable<personOrderByInput>
    by: Array<PersonScalarFieldEnum>
    having?: personScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _avg?: PersonAvgAggregateInputType
    _sum?: PersonSumAggregateInputType
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }


  export type PersonGroupByOutputType = {
    user_id: number
    fname: string | null
    lname: string | null
    username: string | null
    password: string | null
    email: string | null
    id_card: string | null
    phone: string | null
    role_id: number
    ct_id: number
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Promise<
    Array<
      PickArray<PersonGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PersonGroupByOutputType[P]> 
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      > 
    >


  export type personSelect = {
    user_id?: boolean
    fname?: boolean
    lname?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    id_card?: boolean
    phone?: boolean
    role_id?: boolean
    ct_id?: boolean
    country?: boolean | countryArgs
    person_role?: boolean | person_roleArgs
    history?: boolean | historyFindManyArgs
  }

  export type personInclude = {
    country?: boolean | countryArgs
    person_role?: boolean | person_roleArgs
    history?: boolean | historyFindManyArgs
  }

  export type personGetPayload<
    S extends boolean | null | undefined | personArgs,
    U = keyof S
      > = S extends true
        ? person
    : S extends undefined
    ? never
    : S extends personArgs | personFindManyArgs
    ?'include' extends U
    ? person  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'country'
        ? countryGetPayload<S['include'][P]> :
        P extends 'person_role'
        ? person_roleGetPayload<S['include'][P]> :
        P extends 'history'
        ? Array < historyGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof person ?person [P]
  : 
          P extends 'country'
        ? countryGetPayload<S['select'][P]> :
        P extends 'person_role'
        ? person_roleGetPayload<S['select'][P]> :
        P extends 'history'
        ? Array < historyGetPayload<S['select'][P]>>  : never
  } 
    : person
  : person


  type personCountArgs = Merge<
    Omit<personFindManyArgs, 'select' | 'include'> & {
      select?: PersonCountAggregateInputType | true
    }
  >

  export interface personDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Person that matches the filter.
     * @param {personFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends personFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, personFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'person'> extends True ? CheckSelect<T, Prisma__personClient<person>, Prisma__personClient<personGetPayload<T>>> : CheckSelect<T, Prisma__personClient<person | null >, Prisma__personClient<personGetPayload<T> | null >>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends personFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, personFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'person'> extends True ? CheckSelect<T, Prisma__personClient<person>, Prisma__personClient<personGetPayload<T>>> : CheckSelect<T, Prisma__personClient<person | null >, Prisma__personClient<personGetPayload<T> | null >>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const personWithUser_idOnly = await prisma.person.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends personFindManyArgs>(
      args?: SelectSubset<T, personFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<person>>, PrismaPromise<Array<personGetPayload<T>>>>

    /**
     * Create a Person.
     * @param {personCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
    **/
    create<T extends personCreateArgs>(
      args: SelectSubset<T, personCreateArgs>
    ): CheckSelect<T, Prisma__personClient<person>, Prisma__personClient<personGetPayload<T>>>

    /**
     * Create many People.
     *     @param {personCreateManyArgs} args - Arguments to create many People.
     *     @example
     *     // Create many People
     *     const person = await prisma.person.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends personCreateManyArgs>(
      args?: SelectSubset<T, personCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Person.
     * @param {personDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
    **/
    delete<T extends personDeleteArgs>(
      args: SelectSubset<T, personDeleteArgs>
    ): CheckSelect<T, Prisma__personClient<person>, Prisma__personClient<personGetPayload<T>>>

    /**
     * Update one Person.
     * @param {personUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends personUpdateArgs>(
      args: SelectSubset<T, personUpdateArgs>
    ): CheckSelect<T, Prisma__personClient<person>, Prisma__personClient<personGetPayload<T>>>

    /**
     * Delete zero or more People.
     * @param {personDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends personDeleteManyArgs>(
      args?: SelectSubset<T, personDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends personUpdateManyArgs>(
      args: SelectSubset<T, personUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {personUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
    **/
    upsert<T extends personUpsertArgs>(
      args: SelectSubset<T, personUpsertArgs>
    ): CheckSelect<T, Prisma__personClient<person>, Prisma__personClient<personGetPayload<T>>>

    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends personCountArgs>(
      args?: Subset<T, personCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__personClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    country<T extends countryArgs = {}>(args?: Subset<T, countryArgs>): CheckSelect<T, Prisma__countryClient<country | null >, Prisma__countryClient<countryGetPayload<T> | null >>;

    person_role<T extends person_roleArgs = {}>(args?: Subset<T, person_roleArgs>): CheckSelect<T, Prisma__person_roleClient<person_role | null >, Prisma__person_roleClient<person_roleGetPayload<T> | null >>;

    history<T extends historyFindManyArgs = {}>(args?: Subset<T, historyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<history>>, PrismaPromise<Array<historyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * person findUnique
   */
  export type personFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * Throw an Error if a person can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which person to fetch.
     * 
    **/
    where: personWhereUniqueInput
  }


  /**
   * person findFirst
   */
  export type personFindFirstArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * Throw an Error if a person can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which person to fetch.
     * 
    **/
    where?: personWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of people to fetch.
     * 
    **/
    orderBy?: Enumerable<personOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for people.
     * 
    **/
    cursor?: personWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` people from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` people.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of people.
     * 
    **/
    distinct?: Enumerable<PersonScalarFieldEnum>
  }


  /**
   * person findMany
   */
  export type personFindManyArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * Filter, which people to fetch.
     * 
    **/
    where?: personWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of people to fetch.
     * 
    **/
    orderBy?: Enumerable<personOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing people.
     * 
    **/
    cursor?: personWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` people from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` people.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PersonScalarFieldEnum>
  }


  /**
   * person create
   */
  export type personCreateArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * The data needed to create a person.
     * 
    **/
    data: XOR<personCreateInput, personUncheckedCreateInput>
  }


  /**
   * person createMany
   */
  export type personCreateManyArgs = {
    data: Enumerable<personCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * person update
   */
  export type personUpdateArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * The data needed to update a person.
     * 
    **/
    data: XOR<personUpdateInput, personUncheckedUpdateInput>
    /**
     * Choose, which person to update.
     * 
    **/
    where: personWhereUniqueInput
  }


  /**
   * person updateMany
   */
  export type personUpdateManyArgs = {
    data: XOR<personUpdateManyMutationInput, personUncheckedUpdateManyInput>
    where?: personWhereInput
  }


  /**
   * person upsert
   */
  export type personUpsertArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * The filter to search for the person to update in case it exists.
     * 
    **/
    where: personWhereUniqueInput
    /**
     * In case the person found by the `where` argument doesn't exist, create a new person with this data.
     * 
    **/
    create: XOR<personCreateInput, personUncheckedCreateInput>
    /**
     * In case the person was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<personUpdateInput, personUncheckedUpdateInput>
  }


  /**
   * person delete
   */
  export type personDeleteArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
    /**
     * Filter which person to delete.
     * 
    **/
    where: personWhereUniqueInput
  }


  /**
   * person deleteMany
   */
  export type personDeleteManyArgs = {
    where?: personWhereInput
  }


  /**
   * person without action
   */
  export type personArgs = {
    /**
     * Select specific fields to fetch from the person
     * 
    **/
    select?: personSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personInclude | null
  }



  /**
   * Model person_role
   */


  export type AggregatePerson_role = {
    _count: Person_roleCountAggregateOutputType | null
    count: Person_roleCountAggregateOutputType | null
    _avg: Person_roleAvgAggregateOutputType | null
    avg: Person_roleAvgAggregateOutputType | null
    _sum: Person_roleSumAggregateOutputType | null
    sum: Person_roleSumAggregateOutputType | null
    _min: Person_roleMinAggregateOutputType | null
    min: Person_roleMinAggregateOutputType | null
    _max: Person_roleMaxAggregateOutputType | null
    max: Person_roleMaxAggregateOutputType | null
  }

  export type Person_roleAvgAggregateOutputType = {
    role_id: number | null
  }

  export type Person_roleSumAggregateOutputType = {
    role_id: number | null
  }

  export type Person_roleMinAggregateOutputType = {
    role_id: number | null
    role_name: string | null
  }

  export type Person_roleMaxAggregateOutputType = {
    role_id: number | null
    role_name: string | null
  }

  export type Person_roleCountAggregateOutputType = {
    role_id: number
    role_name: number
    _all: number
  }


  export type Person_roleAvgAggregateInputType = {
    role_id?: true
  }

  export type Person_roleSumAggregateInputType = {
    role_id?: true
  }

  export type Person_roleMinAggregateInputType = {
    role_id?: true
    role_name?: true
  }

  export type Person_roleMaxAggregateInputType = {
    role_id?: true
    role_name?: true
  }

  export type Person_roleCountAggregateInputType = {
    role_id?: true
    role_name?: true
    _all?: true
  }

  export type Person_roleAggregateArgs = {
    /**
     * Filter which person_role to aggregate.
     * 
    **/
    where?: person_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of person_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<person_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: person_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` person_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` person_roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned person_roles
    **/
    _count?: true | Person_roleCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Person_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Person_roleAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Person_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Person_roleSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Person_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Person_roleMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Person_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Person_roleMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Person_roleMaxAggregateInputType
  }

  export type GetPerson_roleAggregateType<T extends Person_roleAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson_role]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson_role[P]>
      : GetScalarType<T[P], AggregatePerson_role[P]>
  }


    
    
  export type Person_roleGroupByArgs = {
    where?: person_roleWhereInput
    orderBy?: Enumerable<person_roleOrderByInput>
    by: Array<Person_roleScalarFieldEnum>
    having?: person_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Person_roleCountAggregateInputType | true
    _avg?: Person_roleAvgAggregateInputType
    _sum?: Person_roleSumAggregateInputType
    _min?: Person_roleMinAggregateInputType
    _max?: Person_roleMaxAggregateInputType
  }


  export type Person_roleGroupByOutputType = {
    role_id: number
    role_name: string | null
    _count: Person_roleCountAggregateOutputType | null
    _avg: Person_roleAvgAggregateOutputType | null
    _sum: Person_roleSumAggregateOutputType | null
    _min: Person_roleMinAggregateOutputType | null
    _max: Person_roleMaxAggregateOutputType | null
  }

  type GetPerson_roleGroupByPayload<T extends Person_roleGroupByArgs> = Promise<
    Array<
      PickArray<Person_roleGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Person_roleGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Person_roleGroupByOutputType[P]> 
            : GetScalarType<T[P], Person_roleGroupByOutputType[P]>
        }
      > 
    >


  export type person_roleSelect = {
    role_id?: boolean
    role_name?: boolean
    person?: boolean | personFindManyArgs
  }

  export type person_roleInclude = {
    person?: boolean | personFindManyArgs
  }

  export type person_roleGetPayload<
    S extends boolean | null | undefined | person_roleArgs,
    U = keyof S
      > = S extends true
        ? person_role
    : S extends undefined
    ? never
    : S extends person_roleArgs | person_roleFindManyArgs
    ?'include' extends U
    ? person_role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'person'
        ? Array < personGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof person_role ?person_role [P]
  : 
          P extends 'person'
        ? Array < personGetPayload<S['select'][P]>>  : never
  } 
    : person_role
  : person_role


  type person_roleCountArgs = Merge<
    Omit<person_roleFindManyArgs, 'select' | 'include'> & {
      select?: Person_roleCountAggregateInputType | true
    }
  >

  export interface person_roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Person_role that matches the filter.
     * @param {person_roleFindUniqueArgs} args - Arguments to find a Person_role
     * @example
     * // Get one Person_role
     * const person_role = await prisma.person_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends person_roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, person_roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'person_role'> extends True ? CheckSelect<T, Prisma__person_roleClient<person_role>, Prisma__person_roleClient<person_roleGetPayload<T>>> : CheckSelect<T, Prisma__person_roleClient<person_role | null >, Prisma__person_roleClient<person_roleGetPayload<T> | null >>

    /**
     * Find the first Person_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {person_roleFindFirstArgs} args - Arguments to find a Person_role
     * @example
     * // Get one Person_role
     * const person_role = await prisma.person_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends person_roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, person_roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'person_role'> extends True ? CheckSelect<T, Prisma__person_roleClient<person_role>, Prisma__person_roleClient<person_roleGetPayload<T>>> : CheckSelect<T, Prisma__person_roleClient<person_role | null >, Prisma__person_roleClient<person_roleGetPayload<T> | null >>

    /**
     * Find zero or more Person_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {person_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Person_roles
     * const person_roles = await prisma.person_role.findMany()
     * 
     * // Get first 10 Person_roles
     * const person_roles = await prisma.person_role.findMany({ take: 10 })
     * 
     * // Only select the `role_id`
     * const person_roleWithRole_idOnly = await prisma.person_role.findMany({ select: { role_id: true } })
     * 
    **/
    findMany<T extends person_roleFindManyArgs>(
      args?: SelectSubset<T, person_roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<person_role>>, PrismaPromise<Array<person_roleGetPayload<T>>>>

    /**
     * Create a Person_role.
     * @param {person_roleCreateArgs} args - Arguments to create a Person_role.
     * @example
     * // Create one Person_role
     * const Person_role = await prisma.person_role.create({
     *   data: {
     *     // ... data to create a Person_role
     *   }
     * })
     * 
    **/
    create<T extends person_roleCreateArgs>(
      args: SelectSubset<T, person_roleCreateArgs>
    ): CheckSelect<T, Prisma__person_roleClient<person_role>, Prisma__person_roleClient<person_roleGetPayload<T>>>

    /**
     * Create many Person_roles.
     *     @param {person_roleCreateManyArgs} args - Arguments to create many Person_roles.
     *     @example
     *     // Create many Person_roles
     *     const person_role = await prisma.person_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends person_roleCreateManyArgs>(
      args?: SelectSubset<T, person_roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Person_role.
     * @param {person_roleDeleteArgs} args - Arguments to delete one Person_role.
     * @example
     * // Delete one Person_role
     * const Person_role = await prisma.person_role.delete({
     *   where: {
     *     // ... filter to delete one Person_role
     *   }
     * })
     * 
    **/
    delete<T extends person_roleDeleteArgs>(
      args: SelectSubset<T, person_roleDeleteArgs>
    ): CheckSelect<T, Prisma__person_roleClient<person_role>, Prisma__person_roleClient<person_roleGetPayload<T>>>

    /**
     * Update one Person_role.
     * @param {person_roleUpdateArgs} args - Arguments to update one Person_role.
     * @example
     * // Update one Person_role
     * const person_role = await prisma.person_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends person_roleUpdateArgs>(
      args: SelectSubset<T, person_roleUpdateArgs>
    ): CheckSelect<T, Prisma__person_roleClient<person_role>, Prisma__person_roleClient<person_roleGetPayload<T>>>

    /**
     * Delete zero or more Person_roles.
     * @param {person_roleDeleteManyArgs} args - Arguments to filter Person_roles to delete.
     * @example
     * // Delete a few Person_roles
     * const { count } = await prisma.person_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends person_roleDeleteManyArgs>(
      args?: SelectSubset<T, person_roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Person_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {person_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Person_roles
     * const person_role = await prisma.person_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends person_roleUpdateManyArgs>(
      args: SelectSubset<T, person_roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Person_role.
     * @param {person_roleUpsertArgs} args - Arguments to update or create a Person_role.
     * @example
     * // Update or create a Person_role
     * const person_role = await prisma.person_role.upsert({
     *   create: {
     *     // ... data to create a Person_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person_role we want to update
     *   }
     * })
    **/
    upsert<T extends person_roleUpsertArgs>(
      args: SelectSubset<T, person_roleUpsertArgs>
    ): CheckSelect<T, Prisma__person_roleClient<person_role>, Prisma__person_roleClient<person_roleGetPayload<T>>>

    /**
     * Count the number of Person_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {person_roleCountArgs} args - Arguments to filter Person_roles to count.
     * @example
     * // Count the number of Person_roles
     * const count = await prisma.person_role.count({
     *   where: {
     *     // ... the filter for the Person_roles we want to count
     *   }
     * })
    **/
    count<T extends person_roleCountArgs>(
      args?: Subset<T, person_roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Person_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Person_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Person_roleAggregateArgs>(args: Subset<T, Person_roleAggregateArgs>): PrismaPromise<GetPerson_roleAggregateType<T>>

    /**
     * Group by Person_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Person_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Person_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Person_roleGroupByArgs['orderBy'] }
        : { orderBy?: Person_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Person_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerson_roleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for person_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__person_roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends personFindManyArgs = {}>(args?: Subset<T, personFindManyArgs>): CheckSelect<T, PrismaPromise<Array<person>>, PrismaPromise<Array<personGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * person_role findUnique
   */
  export type person_roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * Throw an Error if a person_role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which person_role to fetch.
     * 
    **/
    where: person_roleWhereUniqueInput
  }


  /**
   * person_role findFirst
   */
  export type person_roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * Throw an Error if a person_role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which person_role to fetch.
     * 
    **/
    where?: person_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of person_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<person_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for person_roles.
     * 
    **/
    cursor?: person_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` person_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` person_roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of person_roles.
     * 
    **/
    distinct?: Enumerable<Person_roleScalarFieldEnum>
  }


  /**
   * person_role findMany
   */
  export type person_roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * Filter, which person_roles to fetch.
     * 
    **/
    where?: person_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of person_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<person_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing person_roles.
     * 
    **/
    cursor?: person_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` person_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` person_roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Person_roleScalarFieldEnum>
  }


  /**
   * person_role create
   */
  export type person_roleCreateArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * The data needed to create a person_role.
     * 
    **/
    data: XOR<person_roleCreateInput, person_roleUncheckedCreateInput>
  }


  /**
   * person_role createMany
   */
  export type person_roleCreateManyArgs = {
    data: Enumerable<person_roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * person_role update
   */
  export type person_roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * The data needed to update a person_role.
     * 
    **/
    data: XOR<person_roleUpdateInput, person_roleUncheckedUpdateInput>
    /**
     * Choose, which person_role to update.
     * 
    **/
    where: person_roleWhereUniqueInput
  }


  /**
   * person_role updateMany
   */
  export type person_roleUpdateManyArgs = {
    data: XOR<person_roleUpdateManyMutationInput, person_roleUncheckedUpdateManyInput>
    where?: person_roleWhereInput
  }


  /**
   * person_role upsert
   */
  export type person_roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * The filter to search for the person_role to update in case it exists.
     * 
    **/
    where: person_roleWhereUniqueInput
    /**
     * In case the person_role found by the `where` argument doesn't exist, create a new person_role with this data.
     * 
    **/
    create: XOR<person_roleCreateInput, person_roleUncheckedCreateInput>
    /**
     * In case the person_role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<person_roleUpdateInput, person_roleUncheckedUpdateInput>
  }


  /**
   * person_role delete
   */
  export type person_roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
    /**
     * Filter which person_role to delete.
     * 
    **/
    where: person_roleWhereUniqueInput
  }


  /**
   * person_role deleteMany
   */
  export type person_roleDeleteManyArgs = {
    where?: person_roleWhereInput
  }


  /**
   * person_role without action
   */
  export type person_roleArgs = {
    /**
     * Select specific fields to fetch from the person_role
     * 
    **/
    select?: person_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: person_roleInclude | null
  }



  /**
   * Model place
   */


  export type AggregatePlace = {
    _count: PlaceCountAggregateOutputType | null
    count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
    max: PlaceMaxAggregateOutputType | null
  }

  export type PlaceAvgAggregateOutputType = {
    p_id: number | null
    tp_id: number | null
  }

  export type PlaceSumAggregateOutputType = {
    p_id: number | null
    tp_id: number | null
  }

  export type PlaceMinAggregateOutputType = {
    p_id: number | null
    p_name: string | null
    p_image: string | null
    tp_id: number | null
  }

  export type PlaceMaxAggregateOutputType = {
    p_id: number | null
    p_name: string | null
    p_image: string | null
    tp_id: number | null
  }

  export type PlaceCountAggregateOutputType = {
    p_id: number
    p_name: number
    p_image: number
    tp_id: number
    _all: number
  }


  export type PlaceAvgAggregateInputType = {
    p_id?: true
    tp_id?: true
  }

  export type PlaceSumAggregateInputType = {
    p_id?: true
    tp_id?: true
  }

  export type PlaceMinAggregateInputType = {
    p_id?: true
    p_name?: true
    p_image?: true
    tp_id?: true
  }

  export type PlaceMaxAggregateInputType = {
    p_id?: true
    p_name?: true
    p_image?: true
    tp_id?: true
  }

  export type PlaceCountAggregateInputType = {
    p_id?: true
    p_name?: true
    p_image?: true
    tp_id?: true
    _all?: true
  }

  export type PlaceAggregateArgs = {
    /**
     * Filter which place to aggregate.
     * 
    **/
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     * 
    **/
    orderBy?: Enumerable<placeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned places
    **/
    _count?: true | PlaceCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PlaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaceAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PlaceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaceSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PlaceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaceMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PlaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaceMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PlaceMaxAggregateInputType
  }

  export type GetPlaceAggregateType<T extends PlaceAggregateArgs> = {
        [P in keyof T & keyof AggregatePlace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlace[P]>
      : GetScalarType<T[P], AggregatePlace[P]>
  }


    
    
  export type PlaceGroupByArgs = {
    where?: placeWhereInput
    orderBy?: Enumerable<placeOrderByInput>
    by: Array<PlaceScalarFieldEnum>
    having?: placeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaceCountAggregateInputType | true
    _avg?: PlaceAvgAggregateInputType
    _sum?: PlaceSumAggregateInputType
    _min?: PlaceMinAggregateInputType
    _max?: PlaceMaxAggregateInputType
  }


  export type PlaceGroupByOutputType = {
    p_id: number
    p_name: string | null
    p_image: string | null
    tp_id: number
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  type GetPlaceGroupByPayload<T extends PlaceGroupByArgs> = Promise<
    Array<
      PickArray<PlaceGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PlaceGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PlaceGroupByOutputType[P]> 
            : GetScalarType<T[P], PlaceGroupByOutputType[P]>
        }
      > 
    >


  export type placeSelect = {
    p_id?: boolean
    p_name?: boolean
    p_image?: boolean
    tp_id?: boolean
    place_type?: boolean | place_typeArgs
    history?: boolean | historyFindManyArgs
  }

  export type placeInclude = {
    place_type?: boolean | place_typeArgs
    history?: boolean | historyFindManyArgs
  }

  export type placeGetPayload<
    S extends boolean | null | undefined | placeArgs,
    U = keyof S
      > = S extends true
        ? place
    : S extends undefined
    ? never
    : S extends placeArgs | placeFindManyArgs
    ?'include' extends U
    ? place  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'place_type'
        ? place_typeGetPayload<S['include'][P]> :
        P extends 'history'
        ? Array < historyGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof place ?place [P]
  : 
          P extends 'place_type'
        ? place_typeGetPayload<S['select'][P]> :
        P extends 'history'
        ? Array < historyGetPayload<S['select'][P]>>  : never
  } 
    : place
  : place


  type placeCountArgs = Merge<
    Omit<placeFindManyArgs, 'select' | 'include'> & {
      select?: PlaceCountAggregateInputType | true
    }
  >

  export interface placeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Place that matches the filter.
     * @param {placeFindUniqueArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends placeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, placeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'place'> extends True ? CheckSelect<T, Prisma__placeClient<place>, Prisma__placeClient<placeGetPayload<T>>> : CheckSelect<T, Prisma__placeClient<place | null >, Prisma__placeClient<placeGetPayload<T> | null >>

    /**
     * Find the first Place that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeFindFirstArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends placeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, placeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'place'> extends True ? CheckSelect<T, Prisma__placeClient<place>, Prisma__placeClient<placeGetPayload<T>>> : CheckSelect<T, Prisma__placeClient<place | null >, Prisma__placeClient<placeGetPayload<T> | null >>

    /**
     * Find zero or more Places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Places
     * const places = await prisma.place.findMany()
     * 
     * // Get first 10 Places
     * const places = await prisma.place.findMany({ take: 10 })
     * 
     * // Only select the `p_id`
     * const placeWithP_idOnly = await prisma.place.findMany({ select: { p_id: true } })
     * 
    **/
    findMany<T extends placeFindManyArgs>(
      args?: SelectSubset<T, placeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<place>>, PrismaPromise<Array<placeGetPayload<T>>>>

    /**
     * Create a Place.
     * @param {placeCreateArgs} args - Arguments to create a Place.
     * @example
     * // Create one Place
     * const Place = await prisma.place.create({
     *   data: {
     *     // ... data to create a Place
     *   }
     * })
     * 
    **/
    create<T extends placeCreateArgs>(
      args: SelectSubset<T, placeCreateArgs>
    ): CheckSelect<T, Prisma__placeClient<place>, Prisma__placeClient<placeGetPayload<T>>>

    /**
     * Create many Places.
     *     @param {placeCreateManyArgs} args - Arguments to create many Places.
     *     @example
     *     // Create many Places
     *     const place = await prisma.place.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends placeCreateManyArgs>(
      args?: SelectSubset<T, placeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Place.
     * @param {placeDeleteArgs} args - Arguments to delete one Place.
     * @example
     * // Delete one Place
     * const Place = await prisma.place.delete({
     *   where: {
     *     // ... filter to delete one Place
     *   }
     * })
     * 
    **/
    delete<T extends placeDeleteArgs>(
      args: SelectSubset<T, placeDeleteArgs>
    ): CheckSelect<T, Prisma__placeClient<place>, Prisma__placeClient<placeGetPayload<T>>>

    /**
     * Update one Place.
     * @param {placeUpdateArgs} args - Arguments to update one Place.
     * @example
     * // Update one Place
     * const place = await prisma.place.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends placeUpdateArgs>(
      args: SelectSubset<T, placeUpdateArgs>
    ): CheckSelect<T, Prisma__placeClient<place>, Prisma__placeClient<placeGetPayload<T>>>

    /**
     * Delete zero or more Places.
     * @param {placeDeleteManyArgs} args - Arguments to filter Places to delete.
     * @example
     * // Delete a few Places
     * const { count } = await prisma.place.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends placeDeleteManyArgs>(
      args?: SelectSubset<T, placeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Places
     * const place = await prisma.place.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends placeUpdateManyArgs>(
      args: SelectSubset<T, placeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Place.
     * @param {placeUpsertArgs} args - Arguments to update or create a Place.
     * @example
     * // Update or create a Place
     * const place = await prisma.place.upsert({
     *   create: {
     *     // ... data to create a Place
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Place we want to update
     *   }
     * })
    **/
    upsert<T extends placeUpsertArgs>(
      args: SelectSubset<T, placeUpsertArgs>
    ): CheckSelect<T, Prisma__placeClient<place>, Prisma__placeClient<placeGetPayload<T>>>

    /**
     * Count the number of Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeCountArgs} args - Arguments to filter Places to count.
     * @example
     * // Count the number of Places
     * const count = await prisma.place.count({
     *   where: {
     *     // ... the filter for the Places we want to count
     *   }
     * })
    **/
    count<T extends placeCountArgs>(
      args?: Subset<T, placeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaceAggregateArgs>(args: Subset<T, PlaceAggregateArgs>): PrismaPromise<GetPlaceAggregateType<T>>

    /**
     * Group by Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaceGroupByArgs['orderBy'] }
        : { orderBy?: PlaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaceGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for place.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__placeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    place_type<T extends place_typeArgs = {}>(args?: Subset<T, place_typeArgs>): CheckSelect<T, Prisma__place_typeClient<place_type | null >, Prisma__place_typeClient<place_typeGetPayload<T> | null >>;

    history<T extends historyFindManyArgs = {}>(args?: Subset<T, historyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<history>>, PrismaPromise<Array<historyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * place findUnique
   */
  export type placeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * Throw an Error if a place can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which place to fetch.
     * 
    **/
    where: placeWhereUniqueInput
  }


  /**
   * place findFirst
   */
  export type placeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * Throw an Error if a place can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which place to fetch.
     * 
    **/
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     * 
    **/
    orderBy?: Enumerable<placeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for places.
     * 
    **/
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of places.
     * 
    **/
    distinct?: Enumerable<PlaceScalarFieldEnum>
  }


  /**
   * place findMany
   */
  export type placeFindManyArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * Filter, which places to fetch.
     * 
    **/
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     * 
    **/
    orderBy?: Enumerable<placeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing places.
     * 
    **/
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlaceScalarFieldEnum>
  }


  /**
   * place create
   */
  export type placeCreateArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * The data needed to create a place.
     * 
    **/
    data: XOR<placeCreateInput, placeUncheckedCreateInput>
  }


  /**
   * place createMany
   */
  export type placeCreateManyArgs = {
    data: Enumerable<placeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * place update
   */
  export type placeUpdateArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * The data needed to update a place.
     * 
    **/
    data: XOR<placeUpdateInput, placeUncheckedUpdateInput>
    /**
     * Choose, which place to update.
     * 
    **/
    where: placeWhereUniqueInput
  }


  /**
   * place updateMany
   */
  export type placeUpdateManyArgs = {
    data: XOR<placeUpdateManyMutationInput, placeUncheckedUpdateManyInput>
    where?: placeWhereInput
  }


  /**
   * place upsert
   */
  export type placeUpsertArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * The filter to search for the place to update in case it exists.
     * 
    **/
    where: placeWhereUniqueInput
    /**
     * In case the place found by the `where` argument doesn't exist, create a new place with this data.
     * 
    **/
    create: XOR<placeCreateInput, placeUncheckedCreateInput>
    /**
     * In case the place was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<placeUpdateInput, placeUncheckedUpdateInput>
  }


  /**
   * place delete
   */
  export type placeDeleteArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
    /**
     * Filter which place to delete.
     * 
    **/
    where: placeWhereUniqueInput
  }


  /**
   * place deleteMany
   */
  export type placeDeleteManyArgs = {
    where?: placeWhereInput
  }


  /**
   * place without action
   */
  export type placeArgs = {
    /**
     * Select specific fields to fetch from the place
     * 
    **/
    select?: placeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placeInclude | null
  }



  /**
   * Model place_type
   */


  export type AggregatePlace_type = {
    _count: Place_typeCountAggregateOutputType | null
    count: Place_typeCountAggregateOutputType | null
    _avg: Place_typeAvgAggregateOutputType | null
    avg: Place_typeAvgAggregateOutputType | null
    _sum: Place_typeSumAggregateOutputType | null
    sum: Place_typeSumAggregateOutputType | null
    _min: Place_typeMinAggregateOutputType | null
    min: Place_typeMinAggregateOutputType | null
    _max: Place_typeMaxAggregateOutputType | null
    max: Place_typeMaxAggregateOutputType | null
  }

  export type Place_typeAvgAggregateOutputType = {
    tp_id: number | null
  }

  export type Place_typeSumAggregateOutputType = {
    tp_id: number | null
  }

  export type Place_typeMinAggregateOutputType = {
    tp_id: number | null
    tp_name: string | null
  }

  export type Place_typeMaxAggregateOutputType = {
    tp_id: number | null
    tp_name: string | null
  }

  export type Place_typeCountAggregateOutputType = {
    tp_id: number
    tp_name: number
    _all: number
  }


  export type Place_typeAvgAggregateInputType = {
    tp_id?: true
  }

  export type Place_typeSumAggregateInputType = {
    tp_id?: true
  }

  export type Place_typeMinAggregateInputType = {
    tp_id?: true
    tp_name?: true
  }

  export type Place_typeMaxAggregateInputType = {
    tp_id?: true
    tp_name?: true
  }

  export type Place_typeCountAggregateInputType = {
    tp_id?: true
    tp_name?: true
    _all?: true
  }

  export type Place_typeAggregateArgs = {
    /**
     * Filter which place_type to aggregate.
     * 
    **/
    where?: place_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_types to fetch.
     * 
    **/
    orderBy?: Enumerable<place_typeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: place_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_types.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned place_types
    **/
    _count?: true | Place_typeCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Place_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Place_typeAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Place_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Place_typeSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Place_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Place_typeMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Place_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Place_typeMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Place_typeMaxAggregateInputType
  }

  export type GetPlace_typeAggregateType<T extends Place_typeAggregateArgs> = {
        [P in keyof T & keyof AggregatePlace_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlace_type[P]>
      : GetScalarType<T[P], AggregatePlace_type[P]>
  }


    
    
  export type Place_typeGroupByArgs = {
    where?: place_typeWhereInput
    orderBy?: Enumerable<place_typeOrderByInput>
    by: Array<Place_typeScalarFieldEnum>
    having?: place_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Place_typeCountAggregateInputType | true
    _avg?: Place_typeAvgAggregateInputType
    _sum?: Place_typeSumAggregateInputType
    _min?: Place_typeMinAggregateInputType
    _max?: Place_typeMaxAggregateInputType
  }


  export type Place_typeGroupByOutputType = {
    tp_id: number
    tp_name: string | null
    _count: Place_typeCountAggregateOutputType | null
    _avg: Place_typeAvgAggregateOutputType | null
    _sum: Place_typeSumAggregateOutputType | null
    _min: Place_typeMinAggregateOutputType | null
    _max: Place_typeMaxAggregateOutputType | null
  }

  type GetPlace_typeGroupByPayload<T extends Place_typeGroupByArgs> = Promise<
    Array<
      PickArray<Place_typeGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Place_typeGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Place_typeGroupByOutputType[P]> 
            : GetScalarType<T[P], Place_typeGroupByOutputType[P]>
        }
      > 
    >


  export type place_typeSelect = {
    tp_id?: boolean
    tp_name?: boolean
    place?: boolean | placeFindManyArgs
  }

  export type place_typeInclude = {
    place?: boolean | placeFindManyArgs
  }

  export type place_typeGetPayload<
    S extends boolean | null | undefined | place_typeArgs,
    U = keyof S
      > = S extends true
        ? place_type
    : S extends undefined
    ? never
    : S extends place_typeArgs | place_typeFindManyArgs
    ?'include' extends U
    ? place_type  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'place'
        ? Array < placeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof place_type ?place_type [P]
  : 
          P extends 'place'
        ? Array < placeGetPayload<S['select'][P]>>  : never
  } 
    : place_type
  : place_type


  type place_typeCountArgs = Merge<
    Omit<place_typeFindManyArgs, 'select' | 'include'> & {
      select?: Place_typeCountAggregateInputType | true
    }
  >

  export interface place_typeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Place_type that matches the filter.
     * @param {place_typeFindUniqueArgs} args - Arguments to find a Place_type
     * @example
     * // Get one Place_type
     * const place_type = await prisma.place_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends place_typeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, place_typeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'place_type'> extends True ? CheckSelect<T, Prisma__place_typeClient<place_type>, Prisma__place_typeClient<place_typeGetPayload<T>>> : CheckSelect<T, Prisma__place_typeClient<place_type | null >, Prisma__place_typeClient<place_typeGetPayload<T> | null >>

    /**
     * Find the first Place_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_typeFindFirstArgs} args - Arguments to find a Place_type
     * @example
     * // Get one Place_type
     * const place_type = await prisma.place_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends place_typeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, place_typeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'place_type'> extends True ? CheckSelect<T, Prisma__place_typeClient<place_type>, Prisma__place_typeClient<place_typeGetPayload<T>>> : CheckSelect<T, Prisma__place_typeClient<place_type | null >, Prisma__place_typeClient<place_typeGetPayload<T> | null >>

    /**
     * Find zero or more Place_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_typeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Place_types
     * const place_types = await prisma.place_type.findMany()
     * 
     * // Get first 10 Place_types
     * const place_types = await prisma.place_type.findMany({ take: 10 })
     * 
     * // Only select the `tp_id`
     * const place_typeWithTp_idOnly = await prisma.place_type.findMany({ select: { tp_id: true } })
     * 
    **/
    findMany<T extends place_typeFindManyArgs>(
      args?: SelectSubset<T, place_typeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<place_type>>, PrismaPromise<Array<place_typeGetPayload<T>>>>

    /**
     * Create a Place_type.
     * @param {place_typeCreateArgs} args - Arguments to create a Place_type.
     * @example
     * // Create one Place_type
     * const Place_type = await prisma.place_type.create({
     *   data: {
     *     // ... data to create a Place_type
     *   }
     * })
     * 
    **/
    create<T extends place_typeCreateArgs>(
      args: SelectSubset<T, place_typeCreateArgs>
    ): CheckSelect<T, Prisma__place_typeClient<place_type>, Prisma__place_typeClient<place_typeGetPayload<T>>>

    /**
     * Create many Place_types.
     *     @param {place_typeCreateManyArgs} args - Arguments to create many Place_types.
     *     @example
     *     // Create many Place_types
     *     const place_type = await prisma.place_type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends place_typeCreateManyArgs>(
      args?: SelectSubset<T, place_typeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Place_type.
     * @param {place_typeDeleteArgs} args - Arguments to delete one Place_type.
     * @example
     * // Delete one Place_type
     * const Place_type = await prisma.place_type.delete({
     *   where: {
     *     // ... filter to delete one Place_type
     *   }
     * })
     * 
    **/
    delete<T extends place_typeDeleteArgs>(
      args: SelectSubset<T, place_typeDeleteArgs>
    ): CheckSelect<T, Prisma__place_typeClient<place_type>, Prisma__place_typeClient<place_typeGetPayload<T>>>

    /**
     * Update one Place_type.
     * @param {place_typeUpdateArgs} args - Arguments to update one Place_type.
     * @example
     * // Update one Place_type
     * const place_type = await prisma.place_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends place_typeUpdateArgs>(
      args: SelectSubset<T, place_typeUpdateArgs>
    ): CheckSelect<T, Prisma__place_typeClient<place_type>, Prisma__place_typeClient<place_typeGetPayload<T>>>

    /**
     * Delete zero or more Place_types.
     * @param {place_typeDeleteManyArgs} args - Arguments to filter Place_types to delete.
     * @example
     * // Delete a few Place_types
     * const { count } = await prisma.place_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends place_typeDeleteManyArgs>(
      args?: SelectSubset<T, place_typeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Place_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Place_types
     * const place_type = await prisma.place_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends place_typeUpdateManyArgs>(
      args: SelectSubset<T, place_typeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Place_type.
     * @param {place_typeUpsertArgs} args - Arguments to update or create a Place_type.
     * @example
     * // Update or create a Place_type
     * const place_type = await prisma.place_type.upsert({
     *   create: {
     *     // ... data to create a Place_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Place_type we want to update
     *   }
     * })
    **/
    upsert<T extends place_typeUpsertArgs>(
      args: SelectSubset<T, place_typeUpsertArgs>
    ): CheckSelect<T, Prisma__place_typeClient<place_type>, Prisma__place_typeClient<place_typeGetPayload<T>>>

    /**
     * Count the number of Place_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_typeCountArgs} args - Arguments to filter Place_types to count.
     * @example
     * // Count the number of Place_types
     * const count = await prisma.place_type.count({
     *   where: {
     *     // ... the filter for the Place_types we want to count
     *   }
     * })
    **/
    count<T extends place_typeCountArgs>(
      args?: Subset<T, place_typeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Place_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Place_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Place_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Place_typeAggregateArgs>(args: Subset<T, Place_typeAggregateArgs>): PrismaPromise<GetPlace_typeAggregateType<T>>

    /**
     * Group by Place_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Place_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Place_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Place_typeGroupByArgs['orderBy'] }
        : { orderBy?: Place_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Place_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlace_typeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for place_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__place_typeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    place<T extends placeFindManyArgs = {}>(args?: Subset<T, placeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<place>>, PrismaPromise<Array<placeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * place_type findUnique
   */
  export type place_typeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * Throw an Error if a place_type can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which place_type to fetch.
     * 
    **/
    where: place_typeWhereUniqueInput
  }


  /**
   * place_type findFirst
   */
  export type place_typeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * Throw an Error if a place_type can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which place_type to fetch.
     * 
    **/
    where?: place_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_types to fetch.
     * 
    **/
    orderBy?: Enumerable<place_typeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for place_types.
     * 
    **/
    cursor?: place_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_types.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of place_types.
     * 
    **/
    distinct?: Enumerable<Place_typeScalarFieldEnum>
  }


  /**
   * place_type findMany
   */
  export type place_typeFindManyArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * Filter, which place_types to fetch.
     * 
    **/
    where?: place_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_types to fetch.
     * 
    **/
    orderBy?: Enumerable<place_typeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing place_types.
     * 
    **/
    cursor?: place_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_types.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Place_typeScalarFieldEnum>
  }


  /**
   * place_type create
   */
  export type place_typeCreateArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * The data needed to create a place_type.
     * 
    **/
    data: XOR<place_typeCreateInput, place_typeUncheckedCreateInput>
  }


  /**
   * place_type createMany
   */
  export type place_typeCreateManyArgs = {
    data: Enumerable<place_typeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * place_type update
   */
  export type place_typeUpdateArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * The data needed to update a place_type.
     * 
    **/
    data: XOR<place_typeUpdateInput, place_typeUncheckedUpdateInput>
    /**
     * Choose, which place_type to update.
     * 
    **/
    where: place_typeWhereUniqueInput
  }


  /**
   * place_type updateMany
   */
  export type place_typeUpdateManyArgs = {
    data: XOR<place_typeUpdateManyMutationInput, place_typeUncheckedUpdateManyInput>
    where?: place_typeWhereInput
  }


  /**
   * place_type upsert
   */
  export type place_typeUpsertArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * The filter to search for the place_type to update in case it exists.
     * 
    **/
    where: place_typeWhereUniqueInput
    /**
     * In case the place_type found by the `where` argument doesn't exist, create a new place_type with this data.
     * 
    **/
    create: XOR<place_typeCreateInput, place_typeUncheckedCreateInput>
    /**
     * In case the place_type was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<place_typeUpdateInput, place_typeUncheckedUpdateInput>
  }


  /**
   * place_type delete
   */
  export type place_typeDeleteArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
    /**
     * Filter which place_type to delete.
     * 
    **/
    where: place_typeWhereUniqueInput
  }


  /**
   * place_type deleteMany
   */
  export type place_typeDeleteManyArgs = {
    where?: place_typeWhereInput
  }


  /**
   * place_type without action
   */
  export type place_typeArgs = {
    /**
     * Select specific fields to fetch from the place_type
     * 
    **/
    select?: place_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: place_typeInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CountryScalarFieldEnum: {
    ct_id: 'ct_id',
    country: 'country'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    h_id: 'h_id',
    h_date: 'h_date',
    wish: 'wish',
    p_id: 'p_id',
    kt_id: 'kt_id',
    user_id: 'user_id'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const KrathongScalarFieldEnum: {
    kt_id: 'kt_id',
    kt_name: 'kt_name',
    amount: 'amount',
    kt_image: 'kt_image',
    detail: 'detail',
    t_id: 't_id'
  };

  export type KrathongScalarFieldEnum = (typeof KrathongScalarFieldEnum)[keyof typeof KrathongScalarFieldEnum]


  export const Kt_typeScalarFieldEnum: {
    t_id: 't_id',
    type_name: 'type_name'
  };

  export type Kt_typeScalarFieldEnum = (typeof Kt_typeScalarFieldEnum)[keyof typeof Kt_typeScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    user_id: 'user_id',
    fname: 'fname',
    lname: 'lname',
    username: 'username',
    password: 'password',
    email: 'email',
    id_card: 'id_card',
    phone: 'phone',
    role_id: 'role_id',
    ct_id: 'ct_id'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const Person_roleScalarFieldEnum: {
    role_id: 'role_id',
    role_name: 'role_name'
  };

  export type Person_roleScalarFieldEnum = (typeof Person_roleScalarFieldEnum)[keyof typeof Person_roleScalarFieldEnum]


  export const PlaceScalarFieldEnum: {
    p_id: 'p_id',
    p_name: 'p_name',
    p_image: 'p_image',
    tp_id: 'tp_id'
  };

  export type PlaceScalarFieldEnum = (typeof PlaceScalarFieldEnum)[keyof typeof PlaceScalarFieldEnum]


  export const Place_typeScalarFieldEnum: {
    tp_id: 'tp_id',
    tp_name: 'tp_name'
  };

  export type Place_typeScalarFieldEnum = (typeof Place_typeScalarFieldEnum)[keyof typeof Place_typeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type countryWhereInput = {
    AND?: Enumerable<countryWhereInput>
    OR?: Enumerable<countryWhereInput>
    NOT?: Enumerable<countryWhereInput>
    ct_id?: IntFilter | number
    country?: StringNullableFilter | string | null
    person?: PersonListRelationFilter
  }

  export type countryOrderByInput = {
    ct_id?: SortOrder
    country?: SortOrder
  }

  export type countryWhereUniqueInput = {
    ct_id?: number
  }

  export type countryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<countryScalarWhereWithAggregatesInput>
    OR?: Enumerable<countryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<countryScalarWhereWithAggregatesInput>
    ct_id?: IntWithAggregatesFilter | number
    country?: StringNullableWithAggregatesFilter | string | null
  }

  export type historyWhereInput = {
    AND?: Enumerable<historyWhereInput>
    OR?: Enumerable<historyWhereInput>
    NOT?: Enumerable<historyWhereInput>
    h_id?: IntFilter | number
    h_date?: DateTimeNullableFilter | Date | string | null
    wish?: StringNullableFilter | string | null
    p_id?: IntFilter | number
    kt_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    krathong?: XOR<KrathongRelationFilter, krathongWhereInput> | null
    place?: XOR<PlaceRelationFilter, placeWhereInput>
    person?: XOR<PersonRelationFilter, personWhereInput> | null
  }

  export type historyOrderByInput = {
    h_id?: SortOrder
    h_date?: SortOrder
    wish?: SortOrder
    p_id?: SortOrder
    kt_id?: SortOrder
    user_id?: SortOrder
  }

  export type historyWhereUniqueInput = {
    h_id?: number
  }

  export type historyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<historyScalarWhereWithAggregatesInput>
    OR?: Enumerable<historyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<historyScalarWhereWithAggregatesInput>
    h_id?: IntWithAggregatesFilter | number
    h_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    wish?: StringNullableWithAggregatesFilter | string | null
    p_id?: IntWithAggregatesFilter | number
    kt_id?: IntNullableWithAggregatesFilter | number | null
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type krathongWhereInput = {
    AND?: Enumerable<krathongWhereInput>
    OR?: Enumerable<krathongWhereInput>
    NOT?: Enumerable<krathongWhereInput>
    kt_id?: IntFilter | number
    kt_name?: StringNullableFilter | string | null
    amount?: IntNullableFilter | number | null
    kt_image?: StringNullableFilter | string | null
    detail?: StringNullableFilter | string | null
    t_id?: IntFilter | number
    kt_type?: XOR<Kt_typeRelationFilter, kt_typeWhereInput>
    history?: HistoryListRelationFilter
  }

  export type krathongOrderByInput = {
    kt_id?: SortOrder
    kt_name?: SortOrder
    amount?: SortOrder
    kt_image?: SortOrder
    detail?: SortOrder
    t_id?: SortOrder
  }

  export type krathongWhereUniqueInput = {
    kt_id?: number
  }

  export type krathongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<krathongScalarWhereWithAggregatesInput>
    OR?: Enumerable<krathongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<krathongScalarWhereWithAggregatesInput>
    kt_id?: IntWithAggregatesFilter | number
    kt_name?: StringNullableWithAggregatesFilter | string | null
    amount?: IntNullableWithAggregatesFilter | number | null
    kt_image?: StringNullableWithAggregatesFilter | string | null
    detail?: StringNullableWithAggregatesFilter | string | null
    t_id?: IntWithAggregatesFilter | number
  }

  export type kt_typeWhereInput = {
    AND?: Enumerable<kt_typeWhereInput>
    OR?: Enumerable<kt_typeWhereInput>
    NOT?: Enumerable<kt_typeWhereInput>
    t_id?: IntFilter | number
    type_name?: StringNullableFilter | string | null
    krathong?: KrathongListRelationFilter
  }

  export type kt_typeOrderByInput = {
    t_id?: SortOrder
    type_name?: SortOrder
  }

  export type kt_typeWhereUniqueInput = {
    t_id?: number
  }

  export type kt_typeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<kt_typeScalarWhereWithAggregatesInput>
    OR?: Enumerable<kt_typeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<kt_typeScalarWhereWithAggregatesInput>
    t_id?: IntWithAggregatesFilter | number
    type_name?: StringNullableWithAggregatesFilter | string | null
  }

  export type personWhereInput = {
    AND?: Enumerable<personWhereInput>
    OR?: Enumerable<personWhereInput>
    NOT?: Enumerable<personWhereInput>
    user_id?: IntFilter | number
    fname?: StringNullableFilter | string | null
    lname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    id_card?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    role_id?: IntFilter | number
    ct_id?: IntFilter | number
    country?: XOR<CountryRelationFilter, countryWhereInput>
    person_role?: XOR<Person_roleRelationFilter, person_roleWhereInput>
    history?: HistoryListRelationFilter
  }

  export type personOrderByInput = {
    user_id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    id_card?: SortOrder
    phone?: SortOrder
    role_id?: SortOrder
    ct_id?: SortOrder
  }

  export type personWhereUniqueInput = {
    user_id?: number
  }

  export type personScalarWhereWithAggregatesInput = {
    AND?: Enumerable<personScalarWhereWithAggregatesInput>
    OR?: Enumerable<personScalarWhereWithAggregatesInput>
    NOT?: Enumerable<personScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    fname?: StringNullableWithAggregatesFilter | string | null
    lname?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    id_card?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    role_id?: IntWithAggregatesFilter | number
    ct_id?: IntWithAggregatesFilter | number
  }

  export type person_roleWhereInput = {
    AND?: Enumerable<person_roleWhereInput>
    OR?: Enumerable<person_roleWhereInput>
    NOT?: Enumerable<person_roleWhereInput>
    role_id?: IntFilter | number
    role_name?: StringNullableFilter | string | null
    person?: PersonListRelationFilter
  }

  export type person_roleOrderByInput = {
    role_id?: SortOrder
    role_name?: SortOrder
  }

  export type person_roleWhereUniqueInput = {
    role_id?: number
  }

  export type person_roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<person_roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<person_roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<person_roleScalarWhereWithAggregatesInput>
    role_id?: IntWithAggregatesFilter | number
    role_name?: StringNullableWithAggregatesFilter | string | null
  }

  export type placeWhereInput = {
    AND?: Enumerable<placeWhereInput>
    OR?: Enumerable<placeWhereInput>
    NOT?: Enumerable<placeWhereInput>
    p_id?: IntFilter | number
    p_name?: StringNullableFilter | string | null
    p_image?: StringNullableFilter | string | null
    tp_id?: IntFilter | number
    place_type?: XOR<Place_typeRelationFilter, place_typeWhereInput>
    history?: HistoryListRelationFilter
  }

  export type placeOrderByInput = {
    p_id?: SortOrder
    p_name?: SortOrder
    p_image?: SortOrder
    tp_id?: SortOrder
  }

  export type placeWhereUniqueInput = {
    p_id?: number
  }

  export type placeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<placeScalarWhereWithAggregatesInput>
    OR?: Enumerable<placeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<placeScalarWhereWithAggregatesInput>
    p_id?: IntWithAggregatesFilter | number
    p_name?: StringNullableWithAggregatesFilter | string | null
    p_image?: StringNullableWithAggregatesFilter | string | null
    tp_id?: IntWithAggregatesFilter | number
  }

  export type place_typeWhereInput = {
    AND?: Enumerable<place_typeWhereInput>
    OR?: Enumerable<place_typeWhereInput>
    NOT?: Enumerable<place_typeWhereInput>
    tp_id?: IntFilter | number
    tp_name?: StringNullableFilter | string | null
    place?: PlaceListRelationFilter
  }

  export type place_typeOrderByInput = {
    tp_id?: SortOrder
    tp_name?: SortOrder
  }

  export type place_typeWhereUniqueInput = {
    tp_id?: number
  }

  export type place_typeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<place_typeScalarWhereWithAggregatesInput>
    OR?: Enumerable<place_typeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<place_typeScalarWhereWithAggregatesInput>
    tp_id?: IntWithAggregatesFilter | number
    tp_name?: StringNullableWithAggregatesFilter | string | null
  }

  export type countryCreateInput = {
    country?: string | null
    person?: personCreateNestedManyWithoutCountryInput
  }

  export type countryUncheckedCreateInput = {
    ct_id?: number
    country?: string | null
    person?: personUncheckedCreateNestedManyWithoutCountryInput
  }

  export type countryUpdateInput = {
    country?: NullableStringFieldUpdateOperationsInput | string | null
    person?: personUpdateManyWithoutCountryInput
  }

  export type countryUncheckedUpdateInput = {
    ct_id?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
    person?: personUncheckedUpdateManyWithoutCountryInput
  }

  export type countryCreateManyInput = {
    ct_id?: number
    country?: string | null
  }

  export type countryUpdateManyMutationInput = {
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type countryUncheckedUpdateManyInput = {
    ct_id?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historyCreateInput = {
    h_date?: Date | string | null
    wish?: string | null
    krathong?: krathongCreateNestedOneWithoutHistoryInput
    place: placeCreateNestedOneWithoutHistoryInput
    person?: personCreateNestedOneWithoutHistoryInput
  }

  export type historyUncheckedCreateInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    p_id: number
    kt_id?: number | null
    user_id?: number | null
  }

  export type historyUpdateInput = {
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    krathong?: krathongUpdateOneWithoutHistoryInput
    place?: placeUpdateOneRequiredWithoutHistoryInput
    person?: personUpdateOneWithoutHistoryInput
  }

  export type historyUncheckedUpdateInput = {
    h_id?: IntFieldUpdateOperationsInput | number
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    p_id?: IntFieldUpdateOperationsInput | number
    kt_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type historyCreateManyInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    p_id: number
    kt_id?: number | null
    user_id?: number | null
  }

  export type historyUpdateManyMutationInput = {
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historyUncheckedUpdateManyInput = {
    h_id?: IntFieldUpdateOperationsInput | number
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    p_id?: IntFieldUpdateOperationsInput | number
    kt_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type krathongCreateInput = {
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    kt_type: kt_typeCreateNestedOneWithoutKrathongInput
    history?: historyCreateNestedManyWithoutKrathongInput
  }

  export type krathongUncheckedCreateInput = {
    kt_id?: number
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    t_id: number
    history?: historyUncheckedCreateNestedManyWithoutKrathongInput
  }

  export type krathongUpdateInput = {
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    kt_type?: kt_typeUpdateOneRequiredWithoutKrathongInput
    history?: historyUpdateManyWithoutKrathongInput
  }

  export type krathongUncheckedUpdateInput = {
    kt_id?: IntFieldUpdateOperationsInput | number
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    t_id?: IntFieldUpdateOperationsInput | number
    history?: historyUncheckedUpdateManyWithoutKrathongInput
  }

  export type krathongCreateManyInput = {
    kt_id?: number
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    t_id: number
  }

  export type krathongUpdateManyMutationInput = {
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type krathongUncheckedUpdateManyInput = {
    kt_id?: IntFieldUpdateOperationsInput | number
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    t_id?: IntFieldUpdateOperationsInput | number
  }

  export type kt_typeCreateInput = {
    type_name?: string | null
    krathong?: krathongCreateNestedManyWithoutKt_typeInput
  }

  export type kt_typeUncheckedCreateInput = {
    t_id?: number
    type_name?: string | null
    krathong?: krathongUncheckedCreateNestedManyWithoutKt_typeInput
  }

  export type kt_typeUpdateInput = {
    type_name?: NullableStringFieldUpdateOperationsInput | string | null
    krathong?: krathongUpdateManyWithoutKt_typeInput
  }

  export type kt_typeUncheckedUpdateInput = {
    t_id?: IntFieldUpdateOperationsInput | number
    type_name?: NullableStringFieldUpdateOperationsInput | string | null
    krathong?: krathongUncheckedUpdateManyWithoutKt_typeInput
  }

  export type kt_typeCreateManyInput = {
    t_id?: number
    type_name?: string | null
  }

  export type kt_typeUpdateManyMutationInput = {
    type_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type kt_typeUncheckedUpdateManyInput = {
    t_id?: IntFieldUpdateOperationsInput | number
    type_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type personCreateInput = {
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    country: countryCreateNestedOneWithoutPersonInput
    person_role: person_roleCreateNestedOneWithoutPersonInput
    history?: historyCreateNestedManyWithoutPersonInput
  }

  export type personUncheckedCreateInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    role_id: number
    ct_id: number
    history?: historyUncheckedCreateNestedManyWithoutPersonInput
  }

  export type personUpdateInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: countryUpdateOneRequiredWithoutPersonInput
    person_role?: person_roleUpdateOneRequiredWithoutPersonInput
    history?: historyUpdateManyWithoutPersonInput
  }

  export type personUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    ct_id?: IntFieldUpdateOperationsInput | number
    history?: historyUncheckedUpdateManyWithoutPersonInput
  }

  export type personCreateManyInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    role_id: number
    ct_id: number
  }

  export type personUpdateManyMutationInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type personUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    ct_id?: IntFieldUpdateOperationsInput | number
  }

  export type person_roleCreateInput = {
    role_name?: string | null
    person?: personCreateNestedManyWithoutPerson_roleInput
  }

  export type person_roleUncheckedCreateInput = {
    role_id?: number
    role_name?: string | null
    person?: personUncheckedCreateNestedManyWithoutPerson_roleInput
  }

  export type person_roleUpdateInput = {
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    person?: personUpdateManyWithoutPerson_roleInput
  }

  export type person_roleUncheckedUpdateInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    person?: personUncheckedUpdateManyWithoutPerson_roleInput
  }

  export type person_roleCreateManyInput = {
    role_id?: number
    role_name?: string | null
  }

  export type person_roleUpdateManyMutationInput = {
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type person_roleUncheckedUpdateManyInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type placeCreateInput = {
    p_name?: string | null
    p_image?: string | null
    place_type: place_typeCreateNestedOneWithoutPlaceInput
    history?: historyCreateNestedManyWithoutPlaceInput
  }

  export type placeUncheckedCreateInput = {
    p_id?: number
    p_name?: string | null
    p_image?: string | null
    tp_id: number
    history?: historyUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type placeUpdateInput = {
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    place_type?: place_typeUpdateOneRequiredWithoutPlaceInput
    history?: historyUpdateManyWithoutPlaceInput
  }

  export type placeUncheckedUpdateInput = {
    p_id?: IntFieldUpdateOperationsInput | number
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    tp_id?: IntFieldUpdateOperationsInput | number
    history?: historyUncheckedUpdateManyWithoutPlaceInput
  }

  export type placeCreateManyInput = {
    p_id?: number
    p_name?: string | null
    p_image?: string | null
    tp_id: number
  }

  export type placeUpdateManyMutationInput = {
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type placeUncheckedUpdateManyInput = {
    p_id?: IntFieldUpdateOperationsInput | number
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    tp_id?: IntFieldUpdateOperationsInput | number
  }

  export type place_typeCreateInput = {
    tp_name?: string | null
    place?: placeCreateNestedManyWithoutPlace_typeInput
  }

  export type place_typeUncheckedCreateInput = {
    tp_id?: number
    tp_name?: string | null
    place?: placeUncheckedCreateNestedManyWithoutPlace_typeInput
  }

  export type place_typeUpdateInput = {
    tp_name?: NullableStringFieldUpdateOperationsInput | string | null
    place?: placeUpdateManyWithoutPlace_typeInput
  }

  export type place_typeUncheckedUpdateInput = {
    tp_id?: IntFieldUpdateOperationsInput | number
    tp_name?: NullableStringFieldUpdateOperationsInput | string | null
    place?: placeUncheckedUpdateManyWithoutPlace_typeInput
  }

  export type place_typeCreateManyInput = {
    tp_id?: number
    tp_name?: string | null
  }

  export type place_typeUpdateManyMutationInput = {
    tp_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type place_typeUncheckedUpdateManyInput = {
    tp_id?: IntFieldUpdateOperationsInput | number
    tp_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type PersonListRelationFilter = {
    every?: personWhereInput
    some?: personWhereInput
    none?: personWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type KrathongRelationFilter = {
    is?: krathongWhereInput | null
    isNot?: krathongWhereInput | null
  }

  export type PlaceRelationFilter = {
    is?: placeWhereInput
    isNot?: placeWhereInput
  }

  export type PersonRelationFilter = {
    is?: personWhereInput | null
    isNot?: personWhereInput | null
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type Kt_typeRelationFilter = {
    is?: kt_typeWhereInput
    isNot?: kt_typeWhereInput
  }

  export type HistoryListRelationFilter = {
    every?: historyWhereInput
    some?: historyWhereInput
    none?: historyWhereInput
  }

  export type KrathongListRelationFilter = {
    every?: krathongWhereInput
    some?: krathongWhereInput
    none?: krathongWhereInput
  }

  export type CountryRelationFilter = {
    is?: countryWhereInput
    isNot?: countryWhereInput
  }

  export type Person_roleRelationFilter = {
    is?: person_roleWhereInput
    isNot?: person_roleWhereInput
  }

  export type Place_typeRelationFilter = {
    is?: place_typeWhereInput
    isNot?: place_typeWhereInput
  }

  export type PlaceListRelationFilter = {
    every?: placeWhereInput
    some?: placeWhereInput
    none?: placeWhereInput
  }

  export type personCreateNestedManyWithoutCountryInput = {
    create?: XOR<Enumerable<personCreateWithoutCountryInput>, Enumerable<personUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutCountryInput>
    createMany?: personCreateManyCountryInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
  }

  export type personUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<Enumerable<personCreateWithoutCountryInput>, Enumerable<personUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutCountryInput>
    createMany?: personCreateManyCountryInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type personUpdateManyWithoutCountryInput = {
    create?: XOR<Enumerable<personCreateWithoutCountryInput>, Enumerable<personUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutCountryInput>
    upsert?: Enumerable<personUpsertWithWhereUniqueWithoutCountryInput>
    createMany?: personCreateManyCountryInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
    set?: Enumerable<personWhereUniqueInput>
    disconnect?: Enumerable<personWhereUniqueInput>
    delete?: Enumerable<personWhereUniqueInput>
    update?: Enumerable<personUpdateWithWhereUniqueWithoutCountryInput>
    updateMany?: Enumerable<personUpdateManyWithWhereWithoutCountryInput>
    deleteMany?: Enumerable<personScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type personUncheckedUpdateManyWithoutCountryInput = {
    create?: XOR<Enumerable<personCreateWithoutCountryInput>, Enumerable<personUncheckedCreateWithoutCountryInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutCountryInput>
    upsert?: Enumerable<personUpsertWithWhereUniqueWithoutCountryInput>
    createMany?: personCreateManyCountryInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
    set?: Enumerable<personWhereUniqueInput>
    disconnect?: Enumerable<personWhereUniqueInput>
    delete?: Enumerable<personWhereUniqueInput>
    update?: Enumerable<personUpdateWithWhereUniqueWithoutCountryInput>
    updateMany?: Enumerable<personUpdateManyWithWhereWithoutCountryInput>
    deleteMany?: Enumerable<personScalarWhereInput>
  }

  export type krathongCreateNestedOneWithoutHistoryInput = {
    create?: XOR<krathongCreateWithoutHistoryInput, krathongUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: krathongCreateOrConnectWithoutHistoryInput
    connect?: krathongWhereUniqueInput
  }

  export type placeCreateNestedOneWithoutHistoryInput = {
    create?: XOR<placeCreateWithoutHistoryInput, placeUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: placeCreateOrConnectWithoutHistoryInput
    connect?: placeWhereUniqueInput
  }

  export type personCreateNestedOneWithoutHistoryInput = {
    create?: XOR<personCreateWithoutHistoryInput, personUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: personCreateOrConnectWithoutHistoryInput
    connect?: personWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type krathongUpdateOneWithoutHistoryInput = {
    create?: XOR<krathongCreateWithoutHistoryInput, krathongUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: krathongCreateOrConnectWithoutHistoryInput
    upsert?: krathongUpsertWithoutHistoryInput
    connect?: krathongWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<krathongUpdateWithoutHistoryInput, krathongUncheckedUpdateWithoutHistoryInput>
  }

  export type placeUpdateOneRequiredWithoutHistoryInput = {
    create?: XOR<placeCreateWithoutHistoryInput, placeUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: placeCreateOrConnectWithoutHistoryInput
    upsert?: placeUpsertWithoutHistoryInput
    connect?: placeWhereUniqueInput
    update?: XOR<placeUpdateWithoutHistoryInput, placeUncheckedUpdateWithoutHistoryInput>
  }

  export type personUpdateOneWithoutHistoryInput = {
    create?: XOR<personCreateWithoutHistoryInput, personUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: personCreateOrConnectWithoutHistoryInput
    upsert?: personUpsertWithoutHistoryInput
    connect?: personWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<personUpdateWithoutHistoryInput, personUncheckedUpdateWithoutHistoryInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type kt_typeCreateNestedOneWithoutKrathongInput = {
    create?: XOR<kt_typeCreateWithoutKrathongInput, kt_typeUncheckedCreateWithoutKrathongInput>
    connectOrCreate?: kt_typeCreateOrConnectWithoutKrathongInput
    connect?: kt_typeWhereUniqueInput
  }

  export type historyCreateNestedManyWithoutKrathongInput = {
    create?: XOR<Enumerable<historyCreateWithoutKrathongInput>, Enumerable<historyUncheckedCreateWithoutKrathongInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutKrathongInput>
    createMany?: historyCreateManyKrathongInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
  }

  export type historyUncheckedCreateNestedManyWithoutKrathongInput = {
    create?: XOR<Enumerable<historyCreateWithoutKrathongInput>, Enumerable<historyUncheckedCreateWithoutKrathongInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutKrathongInput>
    createMany?: historyCreateManyKrathongInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
  }

  export type kt_typeUpdateOneRequiredWithoutKrathongInput = {
    create?: XOR<kt_typeCreateWithoutKrathongInput, kt_typeUncheckedCreateWithoutKrathongInput>
    connectOrCreate?: kt_typeCreateOrConnectWithoutKrathongInput
    upsert?: kt_typeUpsertWithoutKrathongInput
    connect?: kt_typeWhereUniqueInput
    update?: XOR<kt_typeUpdateWithoutKrathongInput, kt_typeUncheckedUpdateWithoutKrathongInput>
  }

  export type historyUpdateManyWithoutKrathongInput = {
    create?: XOR<Enumerable<historyCreateWithoutKrathongInput>, Enumerable<historyUncheckedCreateWithoutKrathongInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutKrathongInput>
    upsert?: Enumerable<historyUpsertWithWhereUniqueWithoutKrathongInput>
    createMany?: historyCreateManyKrathongInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
    set?: Enumerable<historyWhereUniqueInput>
    disconnect?: Enumerable<historyWhereUniqueInput>
    delete?: Enumerable<historyWhereUniqueInput>
    update?: Enumerable<historyUpdateWithWhereUniqueWithoutKrathongInput>
    updateMany?: Enumerable<historyUpdateManyWithWhereWithoutKrathongInput>
    deleteMany?: Enumerable<historyScalarWhereInput>
  }

  export type historyUncheckedUpdateManyWithoutKrathongInput = {
    create?: XOR<Enumerable<historyCreateWithoutKrathongInput>, Enumerable<historyUncheckedCreateWithoutKrathongInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutKrathongInput>
    upsert?: Enumerable<historyUpsertWithWhereUniqueWithoutKrathongInput>
    createMany?: historyCreateManyKrathongInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
    set?: Enumerable<historyWhereUniqueInput>
    disconnect?: Enumerable<historyWhereUniqueInput>
    delete?: Enumerable<historyWhereUniqueInput>
    update?: Enumerable<historyUpdateWithWhereUniqueWithoutKrathongInput>
    updateMany?: Enumerable<historyUpdateManyWithWhereWithoutKrathongInput>
    deleteMany?: Enumerable<historyScalarWhereInput>
  }

  export type krathongCreateNestedManyWithoutKt_typeInput = {
    create?: XOR<Enumerable<krathongCreateWithoutKt_typeInput>, Enumerable<krathongUncheckedCreateWithoutKt_typeInput>>
    connectOrCreate?: Enumerable<krathongCreateOrConnectWithoutKt_typeInput>
    createMany?: krathongCreateManyKt_typeInputEnvelope
    connect?: Enumerable<krathongWhereUniqueInput>
  }

  export type krathongUncheckedCreateNestedManyWithoutKt_typeInput = {
    create?: XOR<Enumerable<krathongCreateWithoutKt_typeInput>, Enumerable<krathongUncheckedCreateWithoutKt_typeInput>>
    connectOrCreate?: Enumerable<krathongCreateOrConnectWithoutKt_typeInput>
    createMany?: krathongCreateManyKt_typeInputEnvelope
    connect?: Enumerable<krathongWhereUniqueInput>
  }

  export type krathongUpdateManyWithoutKt_typeInput = {
    create?: XOR<Enumerable<krathongCreateWithoutKt_typeInput>, Enumerable<krathongUncheckedCreateWithoutKt_typeInput>>
    connectOrCreate?: Enumerable<krathongCreateOrConnectWithoutKt_typeInput>
    upsert?: Enumerable<krathongUpsertWithWhereUniqueWithoutKt_typeInput>
    createMany?: krathongCreateManyKt_typeInputEnvelope
    connect?: Enumerable<krathongWhereUniqueInput>
    set?: Enumerable<krathongWhereUniqueInput>
    disconnect?: Enumerable<krathongWhereUniqueInput>
    delete?: Enumerable<krathongWhereUniqueInput>
    update?: Enumerable<krathongUpdateWithWhereUniqueWithoutKt_typeInput>
    updateMany?: Enumerable<krathongUpdateManyWithWhereWithoutKt_typeInput>
    deleteMany?: Enumerable<krathongScalarWhereInput>
  }

  export type krathongUncheckedUpdateManyWithoutKt_typeInput = {
    create?: XOR<Enumerable<krathongCreateWithoutKt_typeInput>, Enumerable<krathongUncheckedCreateWithoutKt_typeInput>>
    connectOrCreate?: Enumerable<krathongCreateOrConnectWithoutKt_typeInput>
    upsert?: Enumerable<krathongUpsertWithWhereUniqueWithoutKt_typeInput>
    createMany?: krathongCreateManyKt_typeInputEnvelope
    connect?: Enumerable<krathongWhereUniqueInput>
    set?: Enumerable<krathongWhereUniqueInput>
    disconnect?: Enumerable<krathongWhereUniqueInput>
    delete?: Enumerable<krathongWhereUniqueInput>
    update?: Enumerable<krathongUpdateWithWhereUniqueWithoutKt_typeInput>
    updateMany?: Enumerable<krathongUpdateManyWithWhereWithoutKt_typeInput>
    deleteMany?: Enumerable<krathongScalarWhereInput>
  }

  export type countryCreateNestedOneWithoutPersonInput = {
    create?: XOR<countryCreateWithoutPersonInput, countryUncheckedCreateWithoutPersonInput>
    connectOrCreate?: countryCreateOrConnectWithoutPersonInput
    connect?: countryWhereUniqueInput
  }

  export type person_roleCreateNestedOneWithoutPersonInput = {
    create?: XOR<person_roleCreateWithoutPersonInput, person_roleUncheckedCreateWithoutPersonInput>
    connectOrCreate?: person_roleCreateOrConnectWithoutPersonInput
    connect?: person_roleWhereUniqueInput
  }

  export type historyCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<historyCreateWithoutPersonInput>, Enumerable<historyUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPersonInput>
    createMany?: historyCreateManyPersonInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
  }

  export type historyUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<historyCreateWithoutPersonInput>, Enumerable<historyUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPersonInput>
    createMany?: historyCreateManyPersonInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
  }

  export type countryUpdateOneRequiredWithoutPersonInput = {
    create?: XOR<countryCreateWithoutPersonInput, countryUncheckedCreateWithoutPersonInput>
    connectOrCreate?: countryCreateOrConnectWithoutPersonInput
    upsert?: countryUpsertWithoutPersonInput
    connect?: countryWhereUniqueInput
    update?: XOR<countryUpdateWithoutPersonInput, countryUncheckedUpdateWithoutPersonInput>
  }

  export type person_roleUpdateOneRequiredWithoutPersonInput = {
    create?: XOR<person_roleCreateWithoutPersonInput, person_roleUncheckedCreateWithoutPersonInput>
    connectOrCreate?: person_roleCreateOrConnectWithoutPersonInput
    upsert?: person_roleUpsertWithoutPersonInput
    connect?: person_roleWhereUniqueInput
    update?: XOR<person_roleUpdateWithoutPersonInput, person_roleUncheckedUpdateWithoutPersonInput>
  }

  export type historyUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<historyCreateWithoutPersonInput>, Enumerable<historyUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<historyUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: historyCreateManyPersonInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
    set?: Enumerable<historyWhereUniqueInput>
    disconnect?: Enumerable<historyWhereUniqueInput>
    delete?: Enumerable<historyWhereUniqueInput>
    update?: Enumerable<historyUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<historyUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<historyScalarWhereInput>
  }

  export type historyUncheckedUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<historyCreateWithoutPersonInput>, Enumerable<historyUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<historyUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: historyCreateManyPersonInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
    set?: Enumerable<historyWhereUniqueInput>
    disconnect?: Enumerable<historyWhereUniqueInput>
    delete?: Enumerable<historyWhereUniqueInput>
    update?: Enumerable<historyUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<historyUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<historyScalarWhereInput>
  }

  export type personCreateNestedManyWithoutPerson_roleInput = {
    create?: XOR<Enumerable<personCreateWithoutPerson_roleInput>, Enumerable<personUncheckedCreateWithoutPerson_roleInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutPerson_roleInput>
    createMany?: personCreateManyPerson_roleInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
  }

  export type personUncheckedCreateNestedManyWithoutPerson_roleInput = {
    create?: XOR<Enumerable<personCreateWithoutPerson_roleInput>, Enumerable<personUncheckedCreateWithoutPerson_roleInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutPerson_roleInput>
    createMany?: personCreateManyPerson_roleInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
  }

  export type personUpdateManyWithoutPerson_roleInput = {
    create?: XOR<Enumerable<personCreateWithoutPerson_roleInput>, Enumerable<personUncheckedCreateWithoutPerson_roleInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutPerson_roleInput>
    upsert?: Enumerable<personUpsertWithWhereUniqueWithoutPerson_roleInput>
    createMany?: personCreateManyPerson_roleInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
    set?: Enumerable<personWhereUniqueInput>
    disconnect?: Enumerable<personWhereUniqueInput>
    delete?: Enumerable<personWhereUniqueInput>
    update?: Enumerable<personUpdateWithWhereUniqueWithoutPerson_roleInput>
    updateMany?: Enumerable<personUpdateManyWithWhereWithoutPerson_roleInput>
    deleteMany?: Enumerable<personScalarWhereInput>
  }

  export type personUncheckedUpdateManyWithoutPerson_roleInput = {
    create?: XOR<Enumerable<personCreateWithoutPerson_roleInput>, Enumerable<personUncheckedCreateWithoutPerson_roleInput>>
    connectOrCreate?: Enumerable<personCreateOrConnectWithoutPerson_roleInput>
    upsert?: Enumerable<personUpsertWithWhereUniqueWithoutPerson_roleInput>
    createMany?: personCreateManyPerson_roleInputEnvelope
    connect?: Enumerable<personWhereUniqueInput>
    set?: Enumerable<personWhereUniqueInput>
    disconnect?: Enumerable<personWhereUniqueInput>
    delete?: Enumerable<personWhereUniqueInput>
    update?: Enumerable<personUpdateWithWhereUniqueWithoutPerson_roleInput>
    updateMany?: Enumerable<personUpdateManyWithWhereWithoutPerson_roleInput>
    deleteMany?: Enumerable<personScalarWhereInput>
  }

  export type place_typeCreateNestedOneWithoutPlaceInput = {
    create?: XOR<place_typeCreateWithoutPlaceInput, place_typeUncheckedCreateWithoutPlaceInput>
    connectOrCreate?: place_typeCreateOrConnectWithoutPlaceInput
    connect?: place_typeWhereUniqueInput
  }

  export type historyCreateNestedManyWithoutPlaceInput = {
    create?: XOR<Enumerable<historyCreateWithoutPlaceInput>, Enumerable<historyUncheckedCreateWithoutPlaceInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPlaceInput>
    createMany?: historyCreateManyPlaceInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
  }

  export type historyUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<Enumerable<historyCreateWithoutPlaceInput>, Enumerable<historyUncheckedCreateWithoutPlaceInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPlaceInput>
    createMany?: historyCreateManyPlaceInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
  }

  export type place_typeUpdateOneRequiredWithoutPlaceInput = {
    create?: XOR<place_typeCreateWithoutPlaceInput, place_typeUncheckedCreateWithoutPlaceInput>
    connectOrCreate?: place_typeCreateOrConnectWithoutPlaceInput
    upsert?: place_typeUpsertWithoutPlaceInput
    connect?: place_typeWhereUniqueInput
    update?: XOR<place_typeUpdateWithoutPlaceInput, place_typeUncheckedUpdateWithoutPlaceInput>
  }

  export type historyUpdateManyWithoutPlaceInput = {
    create?: XOR<Enumerable<historyCreateWithoutPlaceInput>, Enumerable<historyUncheckedCreateWithoutPlaceInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPlaceInput>
    upsert?: Enumerable<historyUpsertWithWhereUniqueWithoutPlaceInput>
    createMany?: historyCreateManyPlaceInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
    set?: Enumerable<historyWhereUniqueInput>
    disconnect?: Enumerable<historyWhereUniqueInput>
    delete?: Enumerable<historyWhereUniqueInput>
    update?: Enumerable<historyUpdateWithWhereUniqueWithoutPlaceInput>
    updateMany?: Enumerable<historyUpdateManyWithWhereWithoutPlaceInput>
    deleteMany?: Enumerable<historyScalarWhereInput>
  }

  export type historyUncheckedUpdateManyWithoutPlaceInput = {
    create?: XOR<Enumerable<historyCreateWithoutPlaceInput>, Enumerable<historyUncheckedCreateWithoutPlaceInput>>
    connectOrCreate?: Enumerable<historyCreateOrConnectWithoutPlaceInput>
    upsert?: Enumerable<historyUpsertWithWhereUniqueWithoutPlaceInput>
    createMany?: historyCreateManyPlaceInputEnvelope
    connect?: Enumerable<historyWhereUniqueInput>
    set?: Enumerable<historyWhereUniqueInput>
    disconnect?: Enumerable<historyWhereUniqueInput>
    delete?: Enumerable<historyWhereUniqueInput>
    update?: Enumerable<historyUpdateWithWhereUniqueWithoutPlaceInput>
    updateMany?: Enumerable<historyUpdateManyWithWhereWithoutPlaceInput>
    deleteMany?: Enumerable<historyScalarWhereInput>
  }

  export type placeCreateNestedManyWithoutPlace_typeInput = {
    create?: XOR<Enumerable<placeCreateWithoutPlace_typeInput>, Enumerable<placeUncheckedCreateWithoutPlace_typeInput>>
    connectOrCreate?: Enumerable<placeCreateOrConnectWithoutPlace_typeInput>
    createMany?: placeCreateManyPlace_typeInputEnvelope
    connect?: Enumerable<placeWhereUniqueInput>
  }

  export type placeUncheckedCreateNestedManyWithoutPlace_typeInput = {
    create?: XOR<Enumerable<placeCreateWithoutPlace_typeInput>, Enumerable<placeUncheckedCreateWithoutPlace_typeInput>>
    connectOrCreate?: Enumerable<placeCreateOrConnectWithoutPlace_typeInput>
    createMany?: placeCreateManyPlace_typeInputEnvelope
    connect?: Enumerable<placeWhereUniqueInput>
  }

  export type placeUpdateManyWithoutPlace_typeInput = {
    create?: XOR<Enumerable<placeCreateWithoutPlace_typeInput>, Enumerable<placeUncheckedCreateWithoutPlace_typeInput>>
    connectOrCreate?: Enumerable<placeCreateOrConnectWithoutPlace_typeInput>
    upsert?: Enumerable<placeUpsertWithWhereUniqueWithoutPlace_typeInput>
    createMany?: placeCreateManyPlace_typeInputEnvelope
    connect?: Enumerable<placeWhereUniqueInput>
    set?: Enumerable<placeWhereUniqueInput>
    disconnect?: Enumerable<placeWhereUniqueInput>
    delete?: Enumerable<placeWhereUniqueInput>
    update?: Enumerable<placeUpdateWithWhereUniqueWithoutPlace_typeInput>
    updateMany?: Enumerable<placeUpdateManyWithWhereWithoutPlace_typeInput>
    deleteMany?: Enumerable<placeScalarWhereInput>
  }

  export type placeUncheckedUpdateManyWithoutPlace_typeInput = {
    create?: XOR<Enumerable<placeCreateWithoutPlace_typeInput>, Enumerable<placeUncheckedCreateWithoutPlace_typeInput>>
    connectOrCreate?: Enumerable<placeCreateOrConnectWithoutPlace_typeInput>
    upsert?: Enumerable<placeUpsertWithWhereUniqueWithoutPlace_typeInput>
    createMany?: placeCreateManyPlace_typeInputEnvelope
    connect?: Enumerable<placeWhereUniqueInput>
    set?: Enumerable<placeWhereUniqueInput>
    disconnect?: Enumerable<placeWhereUniqueInput>
    delete?: Enumerable<placeWhereUniqueInput>
    update?: Enumerable<placeUpdateWithWhereUniqueWithoutPlace_typeInput>
    updateMany?: Enumerable<placeUpdateManyWithWhereWithoutPlace_typeInput>
    deleteMany?: Enumerable<placeScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type personCreateWithoutCountryInput = {
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    person_role: person_roleCreateNestedOneWithoutPersonInput
    history?: historyCreateNestedManyWithoutPersonInput
  }

  export type personUncheckedCreateWithoutCountryInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    role_id: number
    history?: historyUncheckedCreateNestedManyWithoutPersonInput
  }

  export type personCreateOrConnectWithoutCountryInput = {
    where: personWhereUniqueInput
    create: XOR<personCreateWithoutCountryInput, personUncheckedCreateWithoutCountryInput>
  }

  export type personCreateManyCountryInputEnvelope = {
    data: Enumerable<personCreateManyCountryInput>
    skipDuplicates?: boolean
  }

  export type personUpsertWithWhereUniqueWithoutCountryInput = {
    where: personWhereUniqueInput
    update: XOR<personUpdateWithoutCountryInput, personUncheckedUpdateWithoutCountryInput>
    create: XOR<personCreateWithoutCountryInput, personUncheckedCreateWithoutCountryInput>
  }

  export type personUpdateWithWhereUniqueWithoutCountryInput = {
    where: personWhereUniqueInput
    data: XOR<personUpdateWithoutCountryInput, personUncheckedUpdateWithoutCountryInput>
  }

  export type personUpdateManyWithWhereWithoutCountryInput = {
    where: personScalarWhereInput
    data: XOR<personUpdateManyMutationInput, personUncheckedUpdateManyWithoutPersonInput>
  }

  export type personScalarWhereInput = {
    AND?: Enumerable<personScalarWhereInput>
    OR?: Enumerable<personScalarWhereInput>
    NOT?: Enumerable<personScalarWhereInput>
    user_id?: IntFilter | number
    fname?: StringNullableFilter | string | null
    lname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    id_card?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    role_id?: IntFilter | number
    ct_id?: IntFilter | number
  }

  export type krathongCreateWithoutHistoryInput = {
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    kt_type: kt_typeCreateNestedOneWithoutKrathongInput
  }

  export type krathongUncheckedCreateWithoutHistoryInput = {
    kt_id?: number
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    t_id: number
  }

  export type krathongCreateOrConnectWithoutHistoryInput = {
    where: krathongWhereUniqueInput
    create: XOR<krathongCreateWithoutHistoryInput, krathongUncheckedCreateWithoutHistoryInput>
  }

  export type placeCreateWithoutHistoryInput = {
    p_name?: string | null
    p_image?: string | null
    place_type: place_typeCreateNestedOneWithoutPlaceInput
  }

  export type placeUncheckedCreateWithoutHistoryInput = {
    p_id?: number
    p_name?: string | null
    p_image?: string | null
    tp_id: number
  }

  export type placeCreateOrConnectWithoutHistoryInput = {
    where: placeWhereUniqueInput
    create: XOR<placeCreateWithoutHistoryInput, placeUncheckedCreateWithoutHistoryInput>
  }

  export type personCreateWithoutHistoryInput = {
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    country: countryCreateNestedOneWithoutPersonInput
    person_role: person_roleCreateNestedOneWithoutPersonInput
  }

  export type personUncheckedCreateWithoutHistoryInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    role_id: number
    ct_id: number
  }

  export type personCreateOrConnectWithoutHistoryInput = {
    where: personWhereUniqueInput
    create: XOR<personCreateWithoutHistoryInput, personUncheckedCreateWithoutHistoryInput>
  }

  export type krathongUpsertWithoutHistoryInput = {
    update: XOR<krathongUpdateWithoutHistoryInput, krathongUncheckedUpdateWithoutHistoryInput>
    create: XOR<krathongCreateWithoutHistoryInput, krathongUncheckedCreateWithoutHistoryInput>
  }

  export type krathongUpdateWithoutHistoryInput = {
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    kt_type?: kt_typeUpdateOneRequiredWithoutKrathongInput
  }

  export type krathongUncheckedUpdateWithoutHistoryInput = {
    kt_id?: IntFieldUpdateOperationsInput | number
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    t_id?: IntFieldUpdateOperationsInput | number
  }

  export type placeUpsertWithoutHistoryInput = {
    update: XOR<placeUpdateWithoutHistoryInput, placeUncheckedUpdateWithoutHistoryInput>
    create: XOR<placeCreateWithoutHistoryInput, placeUncheckedCreateWithoutHistoryInput>
  }

  export type placeUpdateWithoutHistoryInput = {
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    place_type?: place_typeUpdateOneRequiredWithoutPlaceInput
  }

  export type placeUncheckedUpdateWithoutHistoryInput = {
    p_id?: IntFieldUpdateOperationsInput | number
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    tp_id?: IntFieldUpdateOperationsInput | number
  }

  export type personUpsertWithoutHistoryInput = {
    update: XOR<personUpdateWithoutHistoryInput, personUncheckedUpdateWithoutHistoryInput>
    create: XOR<personCreateWithoutHistoryInput, personUncheckedCreateWithoutHistoryInput>
  }

  export type personUpdateWithoutHistoryInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: countryUpdateOneRequiredWithoutPersonInput
    person_role?: person_roleUpdateOneRequiredWithoutPersonInput
  }

  export type personUncheckedUpdateWithoutHistoryInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    ct_id?: IntFieldUpdateOperationsInput | number
  }

  export type kt_typeCreateWithoutKrathongInput = {
    type_name?: string | null
  }

  export type kt_typeUncheckedCreateWithoutKrathongInput = {
    t_id?: number
    type_name?: string | null
  }

  export type kt_typeCreateOrConnectWithoutKrathongInput = {
    where: kt_typeWhereUniqueInput
    create: XOR<kt_typeCreateWithoutKrathongInput, kt_typeUncheckedCreateWithoutKrathongInput>
  }

  export type historyCreateWithoutKrathongInput = {
    h_date?: Date | string | null
    wish?: string | null
    place: placeCreateNestedOneWithoutHistoryInput
    person?: personCreateNestedOneWithoutHistoryInput
  }

  export type historyUncheckedCreateWithoutKrathongInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    p_id: number
    user_id?: number | null
  }

  export type historyCreateOrConnectWithoutKrathongInput = {
    where: historyWhereUniqueInput
    create: XOR<historyCreateWithoutKrathongInput, historyUncheckedCreateWithoutKrathongInput>
  }

  export type historyCreateManyKrathongInputEnvelope = {
    data: Enumerable<historyCreateManyKrathongInput>
    skipDuplicates?: boolean
  }

  export type kt_typeUpsertWithoutKrathongInput = {
    update: XOR<kt_typeUpdateWithoutKrathongInput, kt_typeUncheckedUpdateWithoutKrathongInput>
    create: XOR<kt_typeCreateWithoutKrathongInput, kt_typeUncheckedCreateWithoutKrathongInput>
  }

  export type kt_typeUpdateWithoutKrathongInput = {
    type_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type kt_typeUncheckedUpdateWithoutKrathongInput = {
    t_id?: IntFieldUpdateOperationsInput | number
    type_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historyUpsertWithWhereUniqueWithoutKrathongInput = {
    where: historyWhereUniqueInput
    update: XOR<historyUpdateWithoutKrathongInput, historyUncheckedUpdateWithoutKrathongInput>
    create: XOR<historyCreateWithoutKrathongInput, historyUncheckedCreateWithoutKrathongInput>
  }

  export type historyUpdateWithWhereUniqueWithoutKrathongInput = {
    where: historyWhereUniqueInput
    data: XOR<historyUpdateWithoutKrathongInput, historyUncheckedUpdateWithoutKrathongInput>
  }

  export type historyUpdateManyWithWhereWithoutKrathongInput = {
    where: historyScalarWhereInput
    data: XOR<historyUpdateManyMutationInput, historyUncheckedUpdateManyWithoutHistoryInput>
  }

  export type historyScalarWhereInput = {
    AND?: Enumerable<historyScalarWhereInput>
    OR?: Enumerable<historyScalarWhereInput>
    NOT?: Enumerable<historyScalarWhereInput>
    h_id?: IntFilter | number
    h_date?: DateTimeNullableFilter | Date | string | null
    wish?: StringNullableFilter | string | null
    p_id?: IntFilter | number
    kt_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
  }

  export type krathongCreateWithoutKt_typeInput = {
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    history?: historyCreateNestedManyWithoutKrathongInput
  }

  export type krathongUncheckedCreateWithoutKt_typeInput = {
    kt_id?: number
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
    history?: historyUncheckedCreateNestedManyWithoutKrathongInput
  }

  export type krathongCreateOrConnectWithoutKt_typeInput = {
    where: krathongWhereUniqueInput
    create: XOR<krathongCreateWithoutKt_typeInput, krathongUncheckedCreateWithoutKt_typeInput>
  }

  export type krathongCreateManyKt_typeInputEnvelope = {
    data: Enumerable<krathongCreateManyKt_typeInput>
    skipDuplicates?: boolean
  }

  export type krathongUpsertWithWhereUniqueWithoutKt_typeInput = {
    where: krathongWhereUniqueInput
    update: XOR<krathongUpdateWithoutKt_typeInput, krathongUncheckedUpdateWithoutKt_typeInput>
    create: XOR<krathongCreateWithoutKt_typeInput, krathongUncheckedCreateWithoutKt_typeInput>
  }

  export type krathongUpdateWithWhereUniqueWithoutKt_typeInput = {
    where: krathongWhereUniqueInput
    data: XOR<krathongUpdateWithoutKt_typeInput, krathongUncheckedUpdateWithoutKt_typeInput>
  }

  export type krathongUpdateManyWithWhereWithoutKt_typeInput = {
    where: krathongScalarWhereInput
    data: XOR<krathongUpdateManyMutationInput, krathongUncheckedUpdateManyWithoutKrathongInput>
  }

  export type krathongScalarWhereInput = {
    AND?: Enumerable<krathongScalarWhereInput>
    OR?: Enumerable<krathongScalarWhereInput>
    NOT?: Enumerable<krathongScalarWhereInput>
    kt_id?: IntFilter | number
    kt_name?: StringNullableFilter | string | null
    amount?: IntNullableFilter | number | null
    kt_image?: StringNullableFilter | string | null
    detail?: StringNullableFilter | string | null
    t_id?: IntFilter | number
  }

  export type countryCreateWithoutPersonInput = {
    country?: string | null
  }

  export type countryUncheckedCreateWithoutPersonInput = {
    ct_id?: number
    country?: string | null
  }

  export type countryCreateOrConnectWithoutPersonInput = {
    where: countryWhereUniqueInput
    create: XOR<countryCreateWithoutPersonInput, countryUncheckedCreateWithoutPersonInput>
  }

  export type person_roleCreateWithoutPersonInput = {
    role_name?: string | null
  }

  export type person_roleUncheckedCreateWithoutPersonInput = {
    role_id?: number
    role_name?: string | null
  }

  export type person_roleCreateOrConnectWithoutPersonInput = {
    where: person_roleWhereUniqueInput
    create: XOR<person_roleCreateWithoutPersonInput, person_roleUncheckedCreateWithoutPersonInput>
  }

  export type historyCreateWithoutPersonInput = {
    h_date?: Date | string | null
    wish?: string | null
    krathong?: krathongCreateNestedOneWithoutHistoryInput
    place: placeCreateNestedOneWithoutHistoryInput
  }

  export type historyUncheckedCreateWithoutPersonInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    p_id: number
    kt_id?: number | null
  }

  export type historyCreateOrConnectWithoutPersonInput = {
    where: historyWhereUniqueInput
    create: XOR<historyCreateWithoutPersonInput, historyUncheckedCreateWithoutPersonInput>
  }

  export type historyCreateManyPersonInputEnvelope = {
    data: Enumerable<historyCreateManyPersonInput>
    skipDuplicates?: boolean
  }

  export type countryUpsertWithoutPersonInput = {
    update: XOR<countryUpdateWithoutPersonInput, countryUncheckedUpdateWithoutPersonInput>
    create: XOR<countryCreateWithoutPersonInput, countryUncheckedCreateWithoutPersonInput>
  }

  export type countryUpdateWithoutPersonInput = {
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type countryUncheckedUpdateWithoutPersonInput = {
    ct_id?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type person_roleUpsertWithoutPersonInput = {
    update: XOR<person_roleUpdateWithoutPersonInput, person_roleUncheckedUpdateWithoutPersonInput>
    create: XOR<person_roleCreateWithoutPersonInput, person_roleUncheckedCreateWithoutPersonInput>
  }

  export type person_roleUpdateWithoutPersonInput = {
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type person_roleUncheckedUpdateWithoutPersonInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historyUpsertWithWhereUniqueWithoutPersonInput = {
    where: historyWhereUniqueInput
    update: XOR<historyUpdateWithoutPersonInput, historyUncheckedUpdateWithoutPersonInput>
    create: XOR<historyCreateWithoutPersonInput, historyUncheckedCreateWithoutPersonInput>
  }

  export type historyUpdateWithWhereUniqueWithoutPersonInput = {
    where: historyWhereUniqueInput
    data: XOR<historyUpdateWithoutPersonInput, historyUncheckedUpdateWithoutPersonInput>
  }

  export type historyUpdateManyWithWhereWithoutPersonInput = {
    where: historyScalarWhereInput
    data: XOR<historyUpdateManyMutationInput, historyUncheckedUpdateManyWithoutHistoryInput>
  }

  export type personCreateWithoutPerson_roleInput = {
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    country: countryCreateNestedOneWithoutPersonInput
    history?: historyCreateNestedManyWithoutPersonInput
  }

  export type personUncheckedCreateWithoutPerson_roleInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    ct_id: number
    history?: historyUncheckedCreateNestedManyWithoutPersonInput
  }

  export type personCreateOrConnectWithoutPerson_roleInput = {
    where: personWhereUniqueInput
    create: XOR<personCreateWithoutPerson_roleInput, personUncheckedCreateWithoutPerson_roleInput>
  }

  export type personCreateManyPerson_roleInputEnvelope = {
    data: Enumerable<personCreateManyPerson_roleInput>
    skipDuplicates?: boolean
  }

  export type personUpsertWithWhereUniqueWithoutPerson_roleInput = {
    where: personWhereUniqueInput
    update: XOR<personUpdateWithoutPerson_roleInput, personUncheckedUpdateWithoutPerson_roleInput>
    create: XOR<personCreateWithoutPerson_roleInput, personUncheckedCreateWithoutPerson_roleInput>
  }

  export type personUpdateWithWhereUniqueWithoutPerson_roleInput = {
    where: personWhereUniqueInput
    data: XOR<personUpdateWithoutPerson_roleInput, personUncheckedUpdateWithoutPerson_roleInput>
  }

  export type personUpdateManyWithWhereWithoutPerson_roleInput = {
    where: personScalarWhereInput
    data: XOR<personUpdateManyMutationInput, personUncheckedUpdateManyWithoutPersonInput>
  }

  export type place_typeCreateWithoutPlaceInput = {
    tp_name?: string | null
  }

  export type place_typeUncheckedCreateWithoutPlaceInput = {
    tp_id?: number
    tp_name?: string | null
  }

  export type place_typeCreateOrConnectWithoutPlaceInput = {
    where: place_typeWhereUniqueInput
    create: XOR<place_typeCreateWithoutPlaceInput, place_typeUncheckedCreateWithoutPlaceInput>
  }

  export type historyCreateWithoutPlaceInput = {
    h_date?: Date | string | null
    wish?: string | null
    krathong?: krathongCreateNestedOneWithoutHistoryInput
    person?: personCreateNestedOneWithoutHistoryInput
  }

  export type historyUncheckedCreateWithoutPlaceInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    kt_id?: number | null
    user_id?: number | null
  }

  export type historyCreateOrConnectWithoutPlaceInput = {
    where: historyWhereUniqueInput
    create: XOR<historyCreateWithoutPlaceInput, historyUncheckedCreateWithoutPlaceInput>
  }

  export type historyCreateManyPlaceInputEnvelope = {
    data: Enumerable<historyCreateManyPlaceInput>
    skipDuplicates?: boolean
  }

  export type place_typeUpsertWithoutPlaceInput = {
    update: XOR<place_typeUpdateWithoutPlaceInput, place_typeUncheckedUpdateWithoutPlaceInput>
    create: XOR<place_typeCreateWithoutPlaceInput, place_typeUncheckedCreateWithoutPlaceInput>
  }

  export type place_typeUpdateWithoutPlaceInput = {
    tp_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type place_typeUncheckedUpdateWithoutPlaceInput = {
    tp_id?: IntFieldUpdateOperationsInput | number
    tp_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historyUpsertWithWhereUniqueWithoutPlaceInput = {
    where: historyWhereUniqueInput
    update: XOR<historyUpdateWithoutPlaceInput, historyUncheckedUpdateWithoutPlaceInput>
    create: XOR<historyCreateWithoutPlaceInput, historyUncheckedCreateWithoutPlaceInput>
  }

  export type historyUpdateWithWhereUniqueWithoutPlaceInput = {
    where: historyWhereUniqueInput
    data: XOR<historyUpdateWithoutPlaceInput, historyUncheckedUpdateWithoutPlaceInput>
  }

  export type historyUpdateManyWithWhereWithoutPlaceInput = {
    where: historyScalarWhereInput
    data: XOR<historyUpdateManyMutationInput, historyUncheckedUpdateManyWithoutHistoryInput>
  }

  export type placeCreateWithoutPlace_typeInput = {
    p_name?: string | null
    p_image?: string | null
    history?: historyCreateNestedManyWithoutPlaceInput
  }

  export type placeUncheckedCreateWithoutPlace_typeInput = {
    p_id?: number
    p_name?: string | null
    p_image?: string | null
    history?: historyUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type placeCreateOrConnectWithoutPlace_typeInput = {
    where: placeWhereUniqueInput
    create: XOR<placeCreateWithoutPlace_typeInput, placeUncheckedCreateWithoutPlace_typeInput>
  }

  export type placeCreateManyPlace_typeInputEnvelope = {
    data: Enumerable<placeCreateManyPlace_typeInput>
    skipDuplicates?: boolean
  }

  export type placeUpsertWithWhereUniqueWithoutPlace_typeInput = {
    where: placeWhereUniqueInput
    update: XOR<placeUpdateWithoutPlace_typeInput, placeUncheckedUpdateWithoutPlace_typeInput>
    create: XOR<placeCreateWithoutPlace_typeInput, placeUncheckedCreateWithoutPlace_typeInput>
  }

  export type placeUpdateWithWhereUniqueWithoutPlace_typeInput = {
    where: placeWhereUniqueInput
    data: XOR<placeUpdateWithoutPlace_typeInput, placeUncheckedUpdateWithoutPlace_typeInput>
  }

  export type placeUpdateManyWithWhereWithoutPlace_typeInput = {
    where: placeScalarWhereInput
    data: XOR<placeUpdateManyMutationInput, placeUncheckedUpdateManyWithoutPlaceInput>
  }

  export type placeScalarWhereInput = {
    AND?: Enumerable<placeScalarWhereInput>
    OR?: Enumerable<placeScalarWhereInput>
    NOT?: Enumerable<placeScalarWhereInput>
    p_id?: IntFilter | number
    p_name?: StringNullableFilter | string | null
    p_image?: StringNullableFilter | string | null
    tp_id?: IntFilter | number
  }

  export type personCreateManyCountryInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    role_id: number
  }

  export type personUpdateWithoutCountryInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    person_role?: person_roleUpdateOneRequiredWithoutPersonInput
    history?: historyUpdateManyWithoutPersonInput
  }

  export type personUncheckedUpdateWithoutCountryInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    history?: historyUncheckedUpdateManyWithoutPersonInput
  }

  export type personUncheckedUpdateManyWithoutPersonInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
  }

  export type historyCreateManyKrathongInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    p_id: number
    user_id?: number | null
  }

  export type historyUpdateWithoutKrathongInput = {
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    place?: placeUpdateOneRequiredWithoutHistoryInput
    person?: personUpdateOneWithoutHistoryInput
  }

  export type historyUncheckedUpdateWithoutKrathongInput = {
    h_id?: IntFieldUpdateOperationsInput | number
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    p_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type historyUncheckedUpdateManyWithoutHistoryInput = {
    h_id?: IntFieldUpdateOperationsInput | number
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    p_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type krathongCreateManyKt_typeInput = {
    kt_id?: number
    kt_name?: string | null
    amount?: number | null
    kt_image?: string | null
    detail?: string | null
  }

  export type krathongUpdateWithoutKt_typeInput = {
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    history?: historyUpdateManyWithoutKrathongInput
  }

  export type krathongUncheckedUpdateWithoutKt_typeInput = {
    kt_id?: IntFieldUpdateOperationsInput | number
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    history?: historyUncheckedUpdateManyWithoutKrathongInput
  }

  export type krathongUncheckedUpdateManyWithoutKrathongInput = {
    kt_id?: IntFieldUpdateOperationsInput | number
    kt_name?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    kt_image?: NullableStringFieldUpdateOperationsInput | string | null
    detail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historyCreateManyPersonInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    p_id: number
    kt_id?: number | null
  }

  export type historyUpdateWithoutPersonInput = {
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    krathong?: krathongUpdateOneWithoutHistoryInput
    place?: placeUpdateOneRequiredWithoutHistoryInput
  }

  export type historyUncheckedUpdateWithoutPersonInput = {
    h_id?: IntFieldUpdateOperationsInput | number
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    p_id?: IntFieldUpdateOperationsInput | number
    kt_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type personCreateManyPerson_roleInput = {
    user_id?: number
    fname?: string | null
    lname?: string | null
    username?: string | null
    password?: string | null
    email?: string | null
    id_card?: string | null
    phone?: string | null
    ct_id: number
  }

  export type personUpdateWithoutPerson_roleInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: countryUpdateOneRequiredWithoutPersonInput
    history?: historyUpdateManyWithoutPersonInput
  }

  export type personUncheckedUpdateWithoutPerson_roleInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    id_card?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    ct_id?: IntFieldUpdateOperationsInput | number
    history?: historyUncheckedUpdateManyWithoutPersonInput
  }

  export type historyCreateManyPlaceInput = {
    h_id?: number
    h_date?: Date | string | null
    wish?: string | null
    kt_id?: number | null
    user_id?: number | null
  }

  export type historyUpdateWithoutPlaceInput = {
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    krathong?: krathongUpdateOneWithoutHistoryInput
    person?: personUpdateOneWithoutHistoryInput
  }

  export type historyUncheckedUpdateWithoutPlaceInput = {
    h_id?: IntFieldUpdateOperationsInput | number
    h_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wish?: NullableStringFieldUpdateOperationsInput | string | null
    kt_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type placeCreateManyPlace_typeInput = {
    p_id?: number
    p_name?: string | null
    p_image?: string | null
  }

  export type placeUpdateWithoutPlace_typeInput = {
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    history?: historyUpdateManyWithoutPlaceInput
  }

  export type placeUncheckedUpdateWithoutPlace_typeInput = {
    p_id?: IntFieldUpdateOperationsInput | number
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
    history?: historyUncheckedUpdateManyWithoutPlaceInput
  }

  export type placeUncheckedUpdateManyWithoutPlaceInput = {
    p_id?: IntFieldUpdateOperationsInput | number
    p_name?: NullableStringFieldUpdateOperationsInput | string | null
    p_image?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}